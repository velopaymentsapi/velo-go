/*
Velo Payments APIs

## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 

API version: 2.35.58
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package velopayments

import (
	"encoding/json"
)

// checks if the PayorV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayorV1{}

// PayorV1 struct for PayorV1
type PayorV1 struct {
	PayorId *string `json:"payorId,omitempty"`
	// The name of the payor.
	PayorName string `json:"payorName"`
	Address *PayorAddress `json:"address,omitempty"`
	// Name of primary contact for the payor.
	PrimaryContactName *string `json:"primaryContactName,omitempty"`
	// Primary contact phone number for the payor.
	PrimaryContactPhone *string `json:"primaryContactPhone,omitempty"`
	// Primary contact email for the payor.
	PrimaryContactEmail *string `json:"primaryContactEmail,omitempty"`
	// The funding account routing number to be used for the payor.
	FundingAccountRoutingNumber *string `json:"fundingAccountRoutingNumber,omitempty"`
	// The funding account number to be used for the payor.
	FundingAccountAccountNumber *string `json:"fundingAccountAccountNumber,omitempty"`
	// The funding account name to be used for the payor.
	FundingAccountAccountName *string `json:"fundingAccountAccountName,omitempty"`
	// The kyc state of the payor. One of the following values: FAILED_KYC, PASSED_KYC, REQUIRES_KYC
	KycState *string `json:"kycState,omitempty"`
	// Whether or not the payor has been manually locked by the backoffice.
	ManualLockout *bool `json:"manualLockout,omitempty"`
	// Whether grace period processing is enabled.
	PayeeGracePeriodProcessingEnabled *bool `json:"payeeGracePeriodProcessingEnabled,omitempty"`
	// The grace period for paying payees in days.
	PayeeGracePeriodDays *int32 `json:"payeeGracePeriodDays,omitempty"`
	// How the payor has chosen to refer to payees.
	CollectiveAlias *string `json:"collectiveAlias,omitempty"`
	// The payor’s support contact email address.
	SupportContact *string `json:"supportContact,omitempty"`
	// The payor’s 'Doing Business As' name.
	DbaName *string `json:"dbaName,omitempty"`
	// Whether or not the payor allows language choice in the UI.
	AllowsLanguageChoice *bool `json:"allowsLanguageChoice,omitempty"`
	// Whether or not the payor has opted-out of reminder emails being sent.
	ReminderEmailsOptOut *bool `json:"reminderEmailsOptOut,omitempty"`
	// The payor’s language preference. Must be one of [EN, FR].
	Language *string `json:"language,omitempty"`
	IncludesReports *bool `json:"includesReports,omitempty"`
	MaxMasterPayorAdmins *int32 `json:"maxMasterPayorAdmins,omitempty"`
	TransmissionTypes *TransmissionTypes `json:"transmissionTypes,omitempty"`
}

// NewPayorV1 instantiates a new PayorV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayorV1(payorName string) *PayorV1 {
	this := PayorV1{}
	this.PayorName = payorName
	return &this
}

// NewPayorV1WithDefaults instantiates a new PayorV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayorV1WithDefaults() *PayorV1 {
	this := PayorV1{}
	return &this
}

// GetPayorId returns the PayorId field value if set, zero value otherwise.
func (o *PayorV1) GetPayorId() string {
	if o == nil || IsNil(o.PayorId) {
		var ret string
		return ret
	}
	return *o.PayorId
}

// GetPayorIdOk returns a tuple with the PayorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetPayorIdOk() (*string, bool) {
	if o == nil || IsNil(o.PayorId) {
		return nil, false
	}
	return o.PayorId, true
}

// HasPayorId returns a boolean if a field has been set.
func (o *PayorV1) HasPayorId() bool {
	if o != nil && !IsNil(o.PayorId) {
		return true
	}

	return false
}

// SetPayorId gets a reference to the given string and assigns it to the PayorId field.
func (o *PayorV1) SetPayorId(v string) {
	o.PayorId = &v
}

// GetPayorName returns the PayorName field value
func (o *PayorV1) GetPayorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayorName
}

// GetPayorNameOk returns a tuple with the PayorName field value
// and a boolean to check if the value has been set.
func (o *PayorV1) GetPayorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayorName, true
}

// SetPayorName sets field value
func (o *PayorV1) SetPayorName(v string) {
	o.PayorName = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PayorV1) GetAddress() PayorAddress {
	if o == nil || IsNil(o.Address) {
		var ret PayorAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetAddressOk() (*PayorAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PayorV1) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given PayorAddress and assigns it to the Address field.
func (o *PayorV1) SetAddress(v PayorAddress) {
	o.Address = &v
}

// GetPrimaryContactName returns the PrimaryContactName field value if set, zero value otherwise.
func (o *PayorV1) GetPrimaryContactName() string {
	if o == nil || IsNil(o.PrimaryContactName) {
		var ret string
		return ret
	}
	return *o.PrimaryContactName
}

// GetPrimaryContactNameOk returns a tuple with the PrimaryContactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetPrimaryContactNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryContactName) {
		return nil, false
	}
	return o.PrimaryContactName, true
}

// HasPrimaryContactName returns a boolean if a field has been set.
func (o *PayorV1) HasPrimaryContactName() bool {
	if o != nil && !IsNil(o.PrimaryContactName) {
		return true
	}

	return false
}

// SetPrimaryContactName gets a reference to the given string and assigns it to the PrimaryContactName field.
func (o *PayorV1) SetPrimaryContactName(v string) {
	o.PrimaryContactName = &v
}

// GetPrimaryContactPhone returns the PrimaryContactPhone field value if set, zero value otherwise.
func (o *PayorV1) GetPrimaryContactPhone() string {
	if o == nil || IsNil(o.PrimaryContactPhone) {
		var ret string
		return ret
	}
	return *o.PrimaryContactPhone
}

// GetPrimaryContactPhoneOk returns a tuple with the PrimaryContactPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetPrimaryContactPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryContactPhone) {
		return nil, false
	}
	return o.PrimaryContactPhone, true
}

// HasPrimaryContactPhone returns a boolean if a field has been set.
func (o *PayorV1) HasPrimaryContactPhone() bool {
	if o != nil && !IsNil(o.PrimaryContactPhone) {
		return true
	}

	return false
}

// SetPrimaryContactPhone gets a reference to the given string and assigns it to the PrimaryContactPhone field.
func (o *PayorV1) SetPrimaryContactPhone(v string) {
	o.PrimaryContactPhone = &v
}

// GetPrimaryContactEmail returns the PrimaryContactEmail field value if set, zero value otherwise.
func (o *PayorV1) GetPrimaryContactEmail() string {
	if o == nil || IsNil(o.PrimaryContactEmail) {
		var ret string
		return ret
	}
	return *o.PrimaryContactEmail
}

// GetPrimaryContactEmailOk returns a tuple with the PrimaryContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetPrimaryContactEmailOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryContactEmail) {
		return nil, false
	}
	return o.PrimaryContactEmail, true
}

// HasPrimaryContactEmail returns a boolean if a field has been set.
func (o *PayorV1) HasPrimaryContactEmail() bool {
	if o != nil && !IsNil(o.PrimaryContactEmail) {
		return true
	}

	return false
}

// SetPrimaryContactEmail gets a reference to the given string and assigns it to the PrimaryContactEmail field.
func (o *PayorV1) SetPrimaryContactEmail(v string) {
	o.PrimaryContactEmail = &v
}

// GetFundingAccountRoutingNumber returns the FundingAccountRoutingNumber field value if set, zero value otherwise.
func (o *PayorV1) GetFundingAccountRoutingNumber() string {
	if o == nil || IsNil(o.FundingAccountRoutingNumber) {
		var ret string
		return ret
	}
	return *o.FundingAccountRoutingNumber
}

// GetFundingAccountRoutingNumberOk returns a tuple with the FundingAccountRoutingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetFundingAccountRoutingNumberOk() (*string, bool) {
	if o == nil || IsNil(o.FundingAccountRoutingNumber) {
		return nil, false
	}
	return o.FundingAccountRoutingNumber, true
}

// HasFundingAccountRoutingNumber returns a boolean if a field has been set.
func (o *PayorV1) HasFundingAccountRoutingNumber() bool {
	if o != nil && !IsNil(o.FundingAccountRoutingNumber) {
		return true
	}

	return false
}

// SetFundingAccountRoutingNumber gets a reference to the given string and assigns it to the FundingAccountRoutingNumber field.
func (o *PayorV1) SetFundingAccountRoutingNumber(v string) {
	o.FundingAccountRoutingNumber = &v
}

// GetFundingAccountAccountNumber returns the FundingAccountAccountNumber field value if set, zero value otherwise.
func (o *PayorV1) GetFundingAccountAccountNumber() string {
	if o == nil || IsNil(o.FundingAccountAccountNumber) {
		var ret string
		return ret
	}
	return *o.FundingAccountAccountNumber
}

// GetFundingAccountAccountNumberOk returns a tuple with the FundingAccountAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetFundingAccountAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.FundingAccountAccountNumber) {
		return nil, false
	}
	return o.FundingAccountAccountNumber, true
}

// HasFundingAccountAccountNumber returns a boolean if a field has been set.
func (o *PayorV1) HasFundingAccountAccountNumber() bool {
	if o != nil && !IsNil(o.FundingAccountAccountNumber) {
		return true
	}

	return false
}

// SetFundingAccountAccountNumber gets a reference to the given string and assigns it to the FundingAccountAccountNumber field.
func (o *PayorV1) SetFundingAccountAccountNumber(v string) {
	o.FundingAccountAccountNumber = &v
}

// GetFundingAccountAccountName returns the FundingAccountAccountName field value if set, zero value otherwise.
func (o *PayorV1) GetFundingAccountAccountName() string {
	if o == nil || IsNil(o.FundingAccountAccountName) {
		var ret string
		return ret
	}
	return *o.FundingAccountAccountName
}

// GetFundingAccountAccountNameOk returns a tuple with the FundingAccountAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetFundingAccountAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.FundingAccountAccountName) {
		return nil, false
	}
	return o.FundingAccountAccountName, true
}

// HasFundingAccountAccountName returns a boolean if a field has been set.
func (o *PayorV1) HasFundingAccountAccountName() bool {
	if o != nil && !IsNil(o.FundingAccountAccountName) {
		return true
	}

	return false
}

// SetFundingAccountAccountName gets a reference to the given string and assigns it to the FundingAccountAccountName field.
func (o *PayorV1) SetFundingAccountAccountName(v string) {
	o.FundingAccountAccountName = &v
}

// GetKycState returns the KycState field value if set, zero value otherwise.
func (o *PayorV1) GetKycState() string {
	if o == nil || IsNil(o.KycState) {
		var ret string
		return ret
	}
	return *o.KycState
}

// GetKycStateOk returns a tuple with the KycState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetKycStateOk() (*string, bool) {
	if o == nil || IsNil(o.KycState) {
		return nil, false
	}
	return o.KycState, true
}

// HasKycState returns a boolean if a field has been set.
func (o *PayorV1) HasKycState() bool {
	if o != nil && !IsNil(o.KycState) {
		return true
	}

	return false
}

// SetKycState gets a reference to the given string and assigns it to the KycState field.
func (o *PayorV1) SetKycState(v string) {
	o.KycState = &v
}

// GetManualLockout returns the ManualLockout field value if set, zero value otherwise.
func (o *PayorV1) GetManualLockout() bool {
	if o == nil || IsNil(o.ManualLockout) {
		var ret bool
		return ret
	}
	return *o.ManualLockout
}

// GetManualLockoutOk returns a tuple with the ManualLockout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetManualLockoutOk() (*bool, bool) {
	if o == nil || IsNil(o.ManualLockout) {
		return nil, false
	}
	return o.ManualLockout, true
}

// HasManualLockout returns a boolean if a field has been set.
func (o *PayorV1) HasManualLockout() bool {
	if o != nil && !IsNil(o.ManualLockout) {
		return true
	}

	return false
}

// SetManualLockout gets a reference to the given bool and assigns it to the ManualLockout field.
func (o *PayorV1) SetManualLockout(v bool) {
	o.ManualLockout = &v
}

// GetPayeeGracePeriodProcessingEnabled returns the PayeeGracePeriodProcessingEnabled field value if set, zero value otherwise.
func (o *PayorV1) GetPayeeGracePeriodProcessingEnabled() bool {
	if o == nil || IsNil(o.PayeeGracePeriodProcessingEnabled) {
		var ret bool
		return ret
	}
	return *o.PayeeGracePeriodProcessingEnabled
}

// GetPayeeGracePeriodProcessingEnabledOk returns a tuple with the PayeeGracePeriodProcessingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetPayeeGracePeriodProcessingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PayeeGracePeriodProcessingEnabled) {
		return nil, false
	}
	return o.PayeeGracePeriodProcessingEnabled, true
}

// HasPayeeGracePeriodProcessingEnabled returns a boolean if a field has been set.
func (o *PayorV1) HasPayeeGracePeriodProcessingEnabled() bool {
	if o != nil && !IsNil(o.PayeeGracePeriodProcessingEnabled) {
		return true
	}

	return false
}

// SetPayeeGracePeriodProcessingEnabled gets a reference to the given bool and assigns it to the PayeeGracePeriodProcessingEnabled field.
func (o *PayorV1) SetPayeeGracePeriodProcessingEnabled(v bool) {
	o.PayeeGracePeriodProcessingEnabled = &v
}

// GetPayeeGracePeriodDays returns the PayeeGracePeriodDays field value if set, zero value otherwise.
func (o *PayorV1) GetPayeeGracePeriodDays() int32 {
	if o == nil || IsNil(o.PayeeGracePeriodDays) {
		var ret int32
		return ret
	}
	return *o.PayeeGracePeriodDays
}

// GetPayeeGracePeriodDaysOk returns a tuple with the PayeeGracePeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetPayeeGracePeriodDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.PayeeGracePeriodDays) {
		return nil, false
	}
	return o.PayeeGracePeriodDays, true
}

// HasPayeeGracePeriodDays returns a boolean if a field has been set.
func (o *PayorV1) HasPayeeGracePeriodDays() bool {
	if o != nil && !IsNil(o.PayeeGracePeriodDays) {
		return true
	}

	return false
}

// SetPayeeGracePeriodDays gets a reference to the given int32 and assigns it to the PayeeGracePeriodDays field.
func (o *PayorV1) SetPayeeGracePeriodDays(v int32) {
	o.PayeeGracePeriodDays = &v
}

// GetCollectiveAlias returns the CollectiveAlias field value if set, zero value otherwise.
func (o *PayorV1) GetCollectiveAlias() string {
	if o == nil || IsNil(o.CollectiveAlias) {
		var ret string
		return ret
	}
	return *o.CollectiveAlias
}

// GetCollectiveAliasOk returns a tuple with the CollectiveAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetCollectiveAliasOk() (*string, bool) {
	if o == nil || IsNil(o.CollectiveAlias) {
		return nil, false
	}
	return o.CollectiveAlias, true
}

// HasCollectiveAlias returns a boolean if a field has been set.
func (o *PayorV1) HasCollectiveAlias() bool {
	if o != nil && !IsNil(o.CollectiveAlias) {
		return true
	}

	return false
}

// SetCollectiveAlias gets a reference to the given string and assigns it to the CollectiveAlias field.
func (o *PayorV1) SetCollectiveAlias(v string) {
	o.CollectiveAlias = &v
}

// GetSupportContact returns the SupportContact field value if set, zero value otherwise.
func (o *PayorV1) GetSupportContact() string {
	if o == nil || IsNil(o.SupportContact) {
		var ret string
		return ret
	}
	return *o.SupportContact
}

// GetSupportContactOk returns a tuple with the SupportContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetSupportContactOk() (*string, bool) {
	if o == nil || IsNil(o.SupportContact) {
		return nil, false
	}
	return o.SupportContact, true
}

// HasSupportContact returns a boolean if a field has been set.
func (o *PayorV1) HasSupportContact() bool {
	if o != nil && !IsNil(o.SupportContact) {
		return true
	}

	return false
}

// SetSupportContact gets a reference to the given string and assigns it to the SupportContact field.
func (o *PayorV1) SetSupportContact(v string) {
	o.SupportContact = &v
}

// GetDbaName returns the DbaName field value if set, zero value otherwise.
func (o *PayorV1) GetDbaName() string {
	if o == nil || IsNil(o.DbaName) {
		var ret string
		return ret
	}
	return *o.DbaName
}

// GetDbaNameOk returns a tuple with the DbaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetDbaNameOk() (*string, bool) {
	if o == nil || IsNil(o.DbaName) {
		return nil, false
	}
	return o.DbaName, true
}

// HasDbaName returns a boolean if a field has been set.
func (o *PayorV1) HasDbaName() bool {
	if o != nil && !IsNil(o.DbaName) {
		return true
	}

	return false
}

// SetDbaName gets a reference to the given string and assigns it to the DbaName field.
func (o *PayorV1) SetDbaName(v string) {
	o.DbaName = &v
}

// GetAllowsLanguageChoice returns the AllowsLanguageChoice field value if set, zero value otherwise.
func (o *PayorV1) GetAllowsLanguageChoice() bool {
	if o == nil || IsNil(o.AllowsLanguageChoice) {
		var ret bool
		return ret
	}
	return *o.AllowsLanguageChoice
}

// GetAllowsLanguageChoiceOk returns a tuple with the AllowsLanguageChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetAllowsLanguageChoiceOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowsLanguageChoice) {
		return nil, false
	}
	return o.AllowsLanguageChoice, true
}

// HasAllowsLanguageChoice returns a boolean if a field has been set.
func (o *PayorV1) HasAllowsLanguageChoice() bool {
	if o != nil && !IsNil(o.AllowsLanguageChoice) {
		return true
	}

	return false
}

// SetAllowsLanguageChoice gets a reference to the given bool and assigns it to the AllowsLanguageChoice field.
func (o *PayorV1) SetAllowsLanguageChoice(v bool) {
	o.AllowsLanguageChoice = &v
}

// GetReminderEmailsOptOut returns the ReminderEmailsOptOut field value if set, zero value otherwise.
func (o *PayorV1) GetReminderEmailsOptOut() bool {
	if o == nil || IsNil(o.ReminderEmailsOptOut) {
		var ret bool
		return ret
	}
	return *o.ReminderEmailsOptOut
}

// GetReminderEmailsOptOutOk returns a tuple with the ReminderEmailsOptOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetReminderEmailsOptOutOk() (*bool, bool) {
	if o == nil || IsNil(o.ReminderEmailsOptOut) {
		return nil, false
	}
	return o.ReminderEmailsOptOut, true
}

// HasReminderEmailsOptOut returns a boolean if a field has been set.
func (o *PayorV1) HasReminderEmailsOptOut() bool {
	if o != nil && !IsNil(o.ReminderEmailsOptOut) {
		return true
	}

	return false
}

// SetReminderEmailsOptOut gets a reference to the given bool and assigns it to the ReminderEmailsOptOut field.
func (o *PayorV1) SetReminderEmailsOptOut(v bool) {
	o.ReminderEmailsOptOut = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *PayorV1) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *PayorV1) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *PayorV1) SetLanguage(v string) {
	o.Language = &v
}

// GetIncludesReports returns the IncludesReports field value if set, zero value otherwise.
func (o *PayorV1) GetIncludesReports() bool {
	if o == nil || IsNil(o.IncludesReports) {
		var ret bool
		return ret
	}
	return *o.IncludesReports
}

// GetIncludesReportsOk returns a tuple with the IncludesReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetIncludesReportsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludesReports) {
		return nil, false
	}
	return o.IncludesReports, true
}

// HasIncludesReports returns a boolean if a field has been set.
func (o *PayorV1) HasIncludesReports() bool {
	if o != nil && !IsNil(o.IncludesReports) {
		return true
	}

	return false
}

// SetIncludesReports gets a reference to the given bool and assigns it to the IncludesReports field.
func (o *PayorV1) SetIncludesReports(v bool) {
	o.IncludesReports = &v
}

// GetMaxMasterPayorAdmins returns the MaxMasterPayorAdmins field value if set, zero value otherwise.
func (o *PayorV1) GetMaxMasterPayorAdmins() int32 {
	if o == nil || IsNil(o.MaxMasterPayorAdmins) {
		var ret int32
		return ret
	}
	return *o.MaxMasterPayorAdmins
}

// GetMaxMasterPayorAdminsOk returns a tuple with the MaxMasterPayorAdmins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetMaxMasterPayorAdminsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMasterPayorAdmins) {
		return nil, false
	}
	return o.MaxMasterPayorAdmins, true
}

// HasMaxMasterPayorAdmins returns a boolean if a field has been set.
func (o *PayorV1) HasMaxMasterPayorAdmins() bool {
	if o != nil && !IsNil(o.MaxMasterPayorAdmins) {
		return true
	}

	return false
}

// SetMaxMasterPayorAdmins gets a reference to the given int32 and assigns it to the MaxMasterPayorAdmins field.
func (o *PayorV1) SetMaxMasterPayorAdmins(v int32) {
	o.MaxMasterPayorAdmins = &v
}

// GetTransmissionTypes returns the TransmissionTypes field value if set, zero value otherwise.
func (o *PayorV1) GetTransmissionTypes() TransmissionTypes {
	if o == nil || IsNil(o.TransmissionTypes) {
		var ret TransmissionTypes
		return ret
	}
	return *o.TransmissionTypes
}

// GetTransmissionTypesOk returns a tuple with the TransmissionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayorV1) GetTransmissionTypesOk() (*TransmissionTypes, bool) {
	if o == nil || IsNil(o.TransmissionTypes) {
		return nil, false
	}
	return o.TransmissionTypes, true
}

// HasTransmissionTypes returns a boolean if a field has been set.
func (o *PayorV1) HasTransmissionTypes() bool {
	if o != nil && !IsNil(o.TransmissionTypes) {
		return true
	}

	return false
}

// SetTransmissionTypes gets a reference to the given TransmissionTypes and assigns it to the TransmissionTypes field.
func (o *PayorV1) SetTransmissionTypes(v TransmissionTypes) {
	o.TransmissionTypes = &v
}

func (o PayorV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayorV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayorId) {
		toSerialize["payorId"] = o.PayorId
	}
	toSerialize["payorName"] = o.PayorName
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.PrimaryContactName) {
		toSerialize["primaryContactName"] = o.PrimaryContactName
	}
	if !IsNil(o.PrimaryContactPhone) {
		toSerialize["primaryContactPhone"] = o.PrimaryContactPhone
	}
	if !IsNil(o.PrimaryContactEmail) {
		toSerialize["primaryContactEmail"] = o.PrimaryContactEmail
	}
	if !IsNil(o.FundingAccountRoutingNumber) {
		toSerialize["fundingAccountRoutingNumber"] = o.FundingAccountRoutingNumber
	}
	if !IsNil(o.FundingAccountAccountNumber) {
		toSerialize["fundingAccountAccountNumber"] = o.FundingAccountAccountNumber
	}
	if !IsNil(o.FundingAccountAccountName) {
		toSerialize["fundingAccountAccountName"] = o.FundingAccountAccountName
	}
	if !IsNil(o.KycState) {
		toSerialize["kycState"] = o.KycState
	}
	if !IsNil(o.ManualLockout) {
		toSerialize["manualLockout"] = o.ManualLockout
	}
	if !IsNil(o.PayeeGracePeriodProcessingEnabled) {
		toSerialize["payeeGracePeriodProcessingEnabled"] = o.PayeeGracePeriodProcessingEnabled
	}
	if !IsNil(o.PayeeGracePeriodDays) {
		toSerialize["payeeGracePeriodDays"] = o.PayeeGracePeriodDays
	}
	if !IsNil(o.CollectiveAlias) {
		toSerialize["collectiveAlias"] = o.CollectiveAlias
	}
	if !IsNil(o.SupportContact) {
		toSerialize["supportContact"] = o.SupportContact
	}
	if !IsNil(o.DbaName) {
		toSerialize["dbaName"] = o.DbaName
	}
	if !IsNil(o.AllowsLanguageChoice) {
		toSerialize["allowsLanguageChoice"] = o.AllowsLanguageChoice
	}
	if !IsNil(o.ReminderEmailsOptOut) {
		toSerialize["reminderEmailsOptOut"] = o.ReminderEmailsOptOut
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.IncludesReports) {
		toSerialize["includesReports"] = o.IncludesReports
	}
	if !IsNil(o.MaxMasterPayorAdmins) {
		toSerialize["maxMasterPayorAdmins"] = o.MaxMasterPayorAdmins
	}
	if !IsNil(o.TransmissionTypes) {
		toSerialize["transmissionTypes"] = o.TransmissionTypes
	}
	return toSerialize, nil
}

type NullablePayorV1 struct {
	value *PayorV1
	isSet bool
}

func (v NullablePayorV1) Get() *PayorV1 {
	return v.value
}

func (v *NullablePayorV1) Set(val *PayorV1) {
	v.value = val
	v.isSet = true
}

func (v NullablePayorV1) IsSet() bool {
	return v.isSet
}

func (v *NullablePayorV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayorV1(val *PayorV1) *NullablePayorV1 {
	return &NullablePayorV1{value: val, isSet: true}
}

func (v NullablePayorV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayorV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


