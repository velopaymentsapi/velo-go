/*
 * Velo Payments APIs
 *
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * API version: 2.26.124
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package velopayments

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// PaymentAuditServiceDeprecatedApiService PaymentAuditServiceDeprecatedApi service
type PaymentAuditServiceDeprecatedApiService service

type ApiExportTransactionsCSVV3Request struct {
	ctx _context.Context
	ApiService *PaymentAuditServiceDeprecatedApiService
	payorId *string
	startDate *string
	endDate *string
}

func (r ApiExportTransactionsCSVV3Request) PayorId(payorId string) ApiExportTransactionsCSVV3Request {
	r.payorId = &payorId
	return r
}
func (r ApiExportTransactionsCSVV3Request) StartDate(startDate string) ApiExportTransactionsCSVV3Request {
	r.startDate = &startDate
	return r
}
func (r ApiExportTransactionsCSVV3Request) EndDate(endDate string) ApiExportTransactionsCSVV3Request {
	r.endDate = &endDate
	return r
}

func (r ApiExportTransactionsCSVV3Request) Execute() (PayorAmlTransactionV3, *_nethttp.Response, error) {
	return r.ApiService.ExportTransactionsCSVV3Execute(r)
}

/*
 * ExportTransactionsCSVV3 V3 Export Transactions
 * Deprecated (use /v4/paymentaudit/transactions instead)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiExportTransactionsCSVV3Request
 */
func (a *PaymentAuditServiceDeprecatedApiService) ExportTransactionsCSVV3(ctx _context.Context) ApiExportTransactionsCSVV3Request {
	return ApiExportTransactionsCSVV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PayorAmlTransactionV3
 */
func (a *PaymentAuditServiceDeprecatedApiService) ExportTransactionsCSVV3Execute(r ApiExportTransactionsCSVV3Request) (PayorAmlTransactionV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayorAmlTransactionV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentAuditServiceDeprecatedApiService.ExportTransactionsCSVV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/paymentaudit/transactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.payorId != nil {
		localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/csv", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFundingsV1Request struct {
	ctx _context.Context
	ApiService *PaymentAuditServiceDeprecatedApiService
	payorId *string
	page *int32
	pageSize *int32
	sort *string
}

func (r ApiGetFundingsV1Request) PayorId(payorId string) ApiGetFundingsV1Request {
	r.payorId = &payorId
	return r
}
func (r ApiGetFundingsV1Request) Page(page int32) ApiGetFundingsV1Request {
	r.page = &page
	return r
}
func (r ApiGetFundingsV1Request) PageSize(pageSize int32) ApiGetFundingsV1Request {
	r.pageSize = &pageSize
	return r
}
func (r ApiGetFundingsV1Request) Sort(sort string) ApiGetFundingsV1Request {
	r.sort = &sort
	return r
}

func (r ApiGetFundingsV1Request) Execute() (GetFundingsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetFundingsV1Execute(r)
}

/*
 * GetFundingsV1 V1 Get Fundings for Payor
 * Deprecated (use /v4/paymentaudit/fundings)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetFundingsV1Request
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetFundingsV1(ctx _context.Context) ApiGetFundingsV1Request {
	return ApiGetFundingsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return GetFundingsResponse
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetFundingsV1Execute(r ApiGetFundingsV1Request) (GetFundingsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetFundingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentAuditServiceDeprecatedApiService.GetFundingsV1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/paymentaudit/fundings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.payorId == nil {
		return localVarReturnValue, nil, reportError("payorId is required and must be specified")
	}

	localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPaymentDetailsV3Request struct {
	ctx _context.Context
	ApiService *PaymentAuditServiceDeprecatedApiService
	paymentId string
	sensitive *bool
}

func (r ApiGetPaymentDetailsV3Request) Sensitive(sensitive bool) ApiGetPaymentDetailsV3Request {
	r.sensitive = &sensitive
	return r
}

func (r ApiGetPaymentDetailsV3Request) Execute() (PaymentResponseV3, *_nethttp.Response, error) {
	return r.ApiService.GetPaymentDetailsV3Execute(r)
}

/*
 * GetPaymentDetailsV3 V3 Get Payment
 * Deprecated (use /v4/paymentaudit/payments/<paymentId> instead)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param paymentId Payment Id
 * @return ApiGetPaymentDetailsV3Request
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetPaymentDetailsV3(ctx _context.Context, paymentId string) ApiGetPaymentDetailsV3Request {
	return ApiGetPaymentDetailsV3Request{
		ApiService: a,
		ctx: ctx,
		paymentId: paymentId,
	}
}

/*
 * Execute executes the request
 * @return PaymentResponseV3
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetPaymentDetailsV3Execute(r ApiGetPaymentDetailsV3Request) (PaymentResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaymentResponseV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentAuditServiceDeprecatedApiService.GetPaymentDetailsV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/paymentaudit/payments/{paymentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentId"+"}", _neturl.PathEscape(parameterToString(r.paymentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sensitive != nil {
		localVarQueryParams.Add("sensitive", parameterToString(*r.sensitive, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPaymentsForPayoutPAV3Request struct {
	ctx _context.Context
	ApiService *PaymentAuditServiceDeprecatedApiService
	payoutId string
	remoteId *string
	status *string
	sourceAmountFrom *int32
	sourceAmountTo *int32
	paymentAmountFrom *int32
	paymentAmountTo *int32
	submittedDateFrom *string
	submittedDateTo *string
	page *int32
	pageSize *int32
	sort *string
	sensitive *bool
}

func (r ApiGetPaymentsForPayoutPAV3Request) RemoteId(remoteId string) ApiGetPaymentsForPayoutPAV3Request {
	r.remoteId = &remoteId
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) Status(status string) ApiGetPaymentsForPayoutPAV3Request {
	r.status = &status
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) SourceAmountFrom(sourceAmountFrom int32) ApiGetPaymentsForPayoutPAV3Request {
	r.sourceAmountFrom = &sourceAmountFrom
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) SourceAmountTo(sourceAmountTo int32) ApiGetPaymentsForPayoutPAV3Request {
	r.sourceAmountTo = &sourceAmountTo
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) PaymentAmountFrom(paymentAmountFrom int32) ApiGetPaymentsForPayoutPAV3Request {
	r.paymentAmountFrom = &paymentAmountFrom
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) PaymentAmountTo(paymentAmountTo int32) ApiGetPaymentsForPayoutPAV3Request {
	r.paymentAmountTo = &paymentAmountTo
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) SubmittedDateFrom(submittedDateFrom string) ApiGetPaymentsForPayoutPAV3Request {
	r.submittedDateFrom = &submittedDateFrom
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) SubmittedDateTo(submittedDateTo string) ApiGetPaymentsForPayoutPAV3Request {
	r.submittedDateTo = &submittedDateTo
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) Page(page int32) ApiGetPaymentsForPayoutPAV3Request {
	r.page = &page
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) PageSize(pageSize int32) ApiGetPaymentsForPayoutPAV3Request {
	r.pageSize = &pageSize
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) Sort(sort string) ApiGetPaymentsForPayoutPAV3Request {
	r.sort = &sort
	return r
}
func (r ApiGetPaymentsForPayoutPAV3Request) Sensitive(sensitive bool) ApiGetPaymentsForPayoutPAV3Request {
	r.sensitive = &sensitive
	return r
}

func (r ApiGetPaymentsForPayoutPAV3Request) Execute() (GetPaymentsForPayoutResponseV3, *_nethttp.Response, error) {
	return r.ApiService.GetPaymentsForPayoutPAV3Execute(r)
}

/*
 * GetPaymentsForPayoutPAV3 V3 Get Payments for Payout
 * Deprecated (use /v4/paymentaudit/payouts/<payoutId> instead)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payoutId The id (UUID) of the payout.
 * @return ApiGetPaymentsForPayoutPAV3Request
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetPaymentsForPayoutPAV3(ctx _context.Context, payoutId string) ApiGetPaymentsForPayoutPAV3Request {
	return ApiGetPaymentsForPayoutPAV3Request{
		ApiService: a,
		ctx: ctx,
		payoutId: payoutId,
	}
}

/*
 * Execute executes the request
 * @return GetPaymentsForPayoutResponseV3
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetPaymentsForPayoutPAV3Execute(r ApiGetPaymentsForPayoutPAV3Request) (GetPaymentsForPayoutResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPaymentsForPayoutResponseV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentAuditServiceDeprecatedApiService.GetPaymentsForPayoutPAV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/paymentaudit/payouts/{payoutId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payoutId"+"}", _neturl.PathEscape(parameterToString(r.payoutId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.remoteId != nil {
		localVarQueryParams.Add("remoteId", parameterToString(*r.remoteId, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.sourceAmountFrom != nil {
		localVarQueryParams.Add("sourceAmountFrom", parameterToString(*r.sourceAmountFrom, ""))
	}
	if r.sourceAmountTo != nil {
		localVarQueryParams.Add("sourceAmountTo", parameterToString(*r.sourceAmountTo, ""))
	}
	if r.paymentAmountFrom != nil {
		localVarQueryParams.Add("paymentAmountFrom", parameterToString(*r.paymentAmountFrom, ""))
	}
	if r.paymentAmountTo != nil {
		localVarQueryParams.Add("paymentAmountTo", parameterToString(*r.paymentAmountTo, ""))
	}
	if r.submittedDateFrom != nil {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(*r.submittedDateFrom, ""))
	}
	if r.submittedDateTo != nil {
		localVarQueryParams.Add("submittedDateTo", parameterToString(*r.submittedDateTo, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.sensitive != nil {
		localVarQueryParams.Add("sensitive", parameterToString(*r.sensitive, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPayoutStatsV1Request struct {
	ctx _context.Context
	ApiService *PaymentAuditServiceDeprecatedApiService
	payorId *string
}

func (r ApiGetPayoutStatsV1Request) PayorId(payorId string) ApiGetPayoutStatsV1Request {
	r.payorId = &payorId
	return r
}

func (r ApiGetPayoutStatsV1Request) Execute() (GetPayoutStatistics, *_nethttp.Response, error) {
	return r.ApiService.GetPayoutStatsV1Execute(r)
}

/*
 * GetPayoutStatsV1 V1 Get Payout Statistics
 * Deprecated (Use /v4/paymentaudit/payoutStatistics)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetPayoutStatsV1Request
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetPayoutStatsV1(ctx _context.Context) ApiGetPayoutStatsV1Request {
	return ApiGetPayoutStatsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return GetPayoutStatistics
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetPayoutStatsV1Execute(r ApiGetPayoutStatsV1Request) (GetPayoutStatistics, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPayoutStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentAuditServiceDeprecatedApiService.GetPayoutStatsV1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/paymentaudit/payoutStatistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.payorId != nil {
		localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPayoutsForPayorV3Request struct {
	ctx _context.Context
	ApiService *PaymentAuditServiceDeprecatedApiService
	payorId *string
	payoutMemo *string
	status *string
	submittedDateFrom *string
	submittedDateTo *string
	page *int32
	pageSize *int32
	sort *string
}

func (r ApiGetPayoutsForPayorV3Request) PayorId(payorId string) ApiGetPayoutsForPayorV3Request {
	r.payorId = &payorId
	return r
}
func (r ApiGetPayoutsForPayorV3Request) PayoutMemo(payoutMemo string) ApiGetPayoutsForPayorV3Request {
	r.payoutMemo = &payoutMemo
	return r
}
func (r ApiGetPayoutsForPayorV3Request) Status(status string) ApiGetPayoutsForPayorV3Request {
	r.status = &status
	return r
}
func (r ApiGetPayoutsForPayorV3Request) SubmittedDateFrom(submittedDateFrom string) ApiGetPayoutsForPayorV3Request {
	r.submittedDateFrom = &submittedDateFrom
	return r
}
func (r ApiGetPayoutsForPayorV3Request) SubmittedDateTo(submittedDateTo string) ApiGetPayoutsForPayorV3Request {
	r.submittedDateTo = &submittedDateTo
	return r
}
func (r ApiGetPayoutsForPayorV3Request) Page(page int32) ApiGetPayoutsForPayorV3Request {
	r.page = &page
	return r
}
func (r ApiGetPayoutsForPayorV3Request) PageSize(pageSize int32) ApiGetPayoutsForPayorV3Request {
	r.pageSize = &pageSize
	return r
}
func (r ApiGetPayoutsForPayorV3Request) Sort(sort string) ApiGetPayoutsForPayorV3Request {
	r.sort = &sort
	return r
}

func (r ApiGetPayoutsForPayorV3Request) Execute() (GetPayoutsResponseV3, *_nethttp.Response, error) {
	return r.ApiService.GetPayoutsForPayorV3Execute(r)
}

/*
 * GetPayoutsForPayorV3 V3 Get Payouts for Payor
 * Deprecated (use /v4/paymentaudit/payouts instead)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetPayoutsForPayorV3Request
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetPayoutsForPayorV3(ctx _context.Context) ApiGetPayoutsForPayorV3Request {
	return ApiGetPayoutsForPayorV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return GetPayoutsResponseV3
 */
func (a *PaymentAuditServiceDeprecatedApiService) GetPayoutsForPayorV3Execute(r ApiGetPayoutsForPayorV3Request) (GetPayoutsResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPayoutsResponseV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentAuditServiceDeprecatedApiService.GetPayoutsForPayorV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/paymentaudit/payouts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.payorId == nil {
		return localVarReturnValue, nil, reportError("payorId is required and must be specified")
	}

	localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	if r.payoutMemo != nil {
		localVarQueryParams.Add("payoutMemo", parameterToString(*r.payoutMemo, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.submittedDateFrom != nil {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(*r.submittedDateFrom, ""))
	}
	if r.submittedDateTo != nil {
		localVarQueryParams.Add("submittedDateTo", parameterToString(*r.submittedDateTo, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPaymentChangesRequest struct {
	ctx _context.Context
	ApiService *PaymentAuditServiceDeprecatedApiService
	payorId *string
	updatedSince *time.Time
	page *int32
	pageSize *int32
}

func (r ApiListPaymentChangesRequest) PayorId(payorId string) ApiListPaymentChangesRequest {
	r.payorId = &payorId
	return r
}
func (r ApiListPaymentChangesRequest) UpdatedSince(updatedSince time.Time) ApiListPaymentChangesRequest {
	r.updatedSince = &updatedSince
	return r
}
func (r ApiListPaymentChangesRequest) Page(page int32) ApiListPaymentChangesRequest {
	r.page = &page
	return r
}
func (r ApiListPaymentChangesRequest) PageSize(pageSize int32) ApiListPaymentChangesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListPaymentChangesRequest) Execute() (PaymentDeltaResponseV1, *_nethttp.Response, error) {
	return r.ApiService.ListPaymentChangesExecute(r)
}

/*
 * ListPaymentChanges V1 List Payment Changes
 * Deprecated (use /v4/payments/deltas instead)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPaymentChangesRequest
 */
func (a *PaymentAuditServiceDeprecatedApiService) ListPaymentChanges(ctx _context.Context) ApiListPaymentChangesRequest {
	return ApiListPaymentChangesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaymentDeltaResponseV1
 */
func (a *PaymentAuditServiceDeprecatedApiService) ListPaymentChangesExecute(r ApiListPaymentChangesRequest) (PaymentDeltaResponseV1, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaymentDeltaResponseV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentAuditServiceDeprecatedApiService.ListPaymentChanges")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/deltas/payments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.payorId == nil {
		return localVarReturnValue, nil, reportError("payorId is required and must be specified")
	}
	if r.updatedSince == nil {
		return localVarReturnValue, nil, reportError("updatedSince is required and must be specified")
	}

	localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	localVarQueryParams.Add("updatedSince", parameterToString(*r.updatedSince, ""))
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPaymentsAuditV3Request struct {
	ctx _context.Context
	ApiService *PaymentAuditServiceDeprecatedApiService
	payeeId *string
	payorId *string
	payorName *string
	remoteId *string
	status *string
	sourceAccountName *string
	sourceAmountFrom *int32
	sourceAmountTo *int32
	sourceCurrency *string
	paymentAmountFrom *int32
	paymentAmountTo *int32
	paymentCurrency *string
	submittedDateFrom *string
	submittedDateTo *string
	paymentMemo *string
	page *int32
	pageSize *int32
	sort *string
	sensitive *bool
}

func (r ApiListPaymentsAuditV3Request) PayeeId(payeeId string) ApiListPaymentsAuditV3Request {
	r.payeeId = &payeeId
	return r
}
func (r ApiListPaymentsAuditV3Request) PayorId(payorId string) ApiListPaymentsAuditV3Request {
	r.payorId = &payorId
	return r
}
func (r ApiListPaymentsAuditV3Request) PayorName(payorName string) ApiListPaymentsAuditV3Request {
	r.payorName = &payorName
	return r
}
func (r ApiListPaymentsAuditV3Request) RemoteId(remoteId string) ApiListPaymentsAuditV3Request {
	r.remoteId = &remoteId
	return r
}
func (r ApiListPaymentsAuditV3Request) Status(status string) ApiListPaymentsAuditV3Request {
	r.status = &status
	return r
}
func (r ApiListPaymentsAuditV3Request) SourceAccountName(sourceAccountName string) ApiListPaymentsAuditV3Request {
	r.sourceAccountName = &sourceAccountName
	return r
}
func (r ApiListPaymentsAuditV3Request) SourceAmountFrom(sourceAmountFrom int32) ApiListPaymentsAuditV3Request {
	r.sourceAmountFrom = &sourceAmountFrom
	return r
}
func (r ApiListPaymentsAuditV3Request) SourceAmountTo(sourceAmountTo int32) ApiListPaymentsAuditV3Request {
	r.sourceAmountTo = &sourceAmountTo
	return r
}
func (r ApiListPaymentsAuditV3Request) SourceCurrency(sourceCurrency string) ApiListPaymentsAuditV3Request {
	r.sourceCurrency = &sourceCurrency
	return r
}
func (r ApiListPaymentsAuditV3Request) PaymentAmountFrom(paymentAmountFrom int32) ApiListPaymentsAuditV3Request {
	r.paymentAmountFrom = &paymentAmountFrom
	return r
}
func (r ApiListPaymentsAuditV3Request) PaymentAmountTo(paymentAmountTo int32) ApiListPaymentsAuditV3Request {
	r.paymentAmountTo = &paymentAmountTo
	return r
}
func (r ApiListPaymentsAuditV3Request) PaymentCurrency(paymentCurrency string) ApiListPaymentsAuditV3Request {
	r.paymentCurrency = &paymentCurrency
	return r
}
func (r ApiListPaymentsAuditV3Request) SubmittedDateFrom(submittedDateFrom string) ApiListPaymentsAuditV3Request {
	r.submittedDateFrom = &submittedDateFrom
	return r
}
func (r ApiListPaymentsAuditV3Request) SubmittedDateTo(submittedDateTo string) ApiListPaymentsAuditV3Request {
	r.submittedDateTo = &submittedDateTo
	return r
}
func (r ApiListPaymentsAuditV3Request) PaymentMemo(paymentMemo string) ApiListPaymentsAuditV3Request {
	r.paymentMemo = &paymentMemo
	return r
}
func (r ApiListPaymentsAuditV3Request) Page(page int32) ApiListPaymentsAuditV3Request {
	r.page = &page
	return r
}
func (r ApiListPaymentsAuditV3Request) PageSize(pageSize int32) ApiListPaymentsAuditV3Request {
	r.pageSize = &pageSize
	return r
}
func (r ApiListPaymentsAuditV3Request) Sort(sort string) ApiListPaymentsAuditV3Request {
	r.sort = &sort
	return r
}
func (r ApiListPaymentsAuditV3Request) Sensitive(sensitive bool) ApiListPaymentsAuditV3Request {
	r.sensitive = &sensitive
	return r
}

func (r ApiListPaymentsAuditV3Request) Execute() (ListPaymentsResponseV3, *_nethttp.Response, error) {
	return r.ApiService.ListPaymentsAuditV3Execute(r)
}

/*
 * ListPaymentsAuditV3 V3 Get List of Payments
 * Deprecated (use /v4/paymentaudit/payments instead)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPaymentsAuditV3Request
 */
func (a *PaymentAuditServiceDeprecatedApiService) ListPaymentsAuditV3(ctx _context.Context) ApiListPaymentsAuditV3Request {
	return ApiListPaymentsAuditV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ListPaymentsResponseV3
 */
func (a *PaymentAuditServiceDeprecatedApiService) ListPaymentsAuditV3Execute(r ApiListPaymentsAuditV3Request) (ListPaymentsResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListPaymentsResponseV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentAuditServiceDeprecatedApiService.ListPaymentsAuditV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/paymentaudit/payments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.payeeId != nil {
		localVarQueryParams.Add("payeeId", parameterToString(*r.payeeId, ""))
	}
	if r.payorId != nil {
		localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	}
	if r.payorName != nil {
		localVarQueryParams.Add("payorName", parameterToString(*r.payorName, ""))
	}
	if r.remoteId != nil {
		localVarQueryParams.Add("remoteId", parameterToString(*r.remoteId, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.sourceAccountName != nil {
		localVarQueryParams.Add("sourceAccountName", parameterToString(*r.sourceAccountName, ""))
	}
	if r.sourceAmountFrom != nil {
		localVarQueryParams.Add("sourceAmountFrom", parameterToString(*r.sourceAmountFrom, ""))
	}
	if r.sourceAmountTo != nil {
		localVarQueryParams.Add("sourceAmountTo", parameterToString(*r.sourceAmountTo, ""))
	}
	if r.sourceCurrency != nil {
		localVarQueryParams.Add("sourceCurrency", parameterToString(*r.sourceCurrency, ""))
	}
	if r.paymentAmountFrom != nil {
		localVarQueryParams.Add("paymentAmountFrom", parameterToString(*r.paymentAmountFrom, ""))
	}
	if r.paymentAmountTo != nil {
		localVarQueryParams.Add("paymentAmountTo", parameterToString(*r.paymentAmountTo, ""))
	}
	if r.paymentCurrency != nil {
		localVarQueryParams.Add("paymentCurrency", parameterToString(*r.paymentCurrency, ""))
	}
	if r.submittedDateFrom != nil {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(*r.submittedDateFrom, ""))
	}
	if r.submittedDateTo != nil {
		localVarQueryParams.Add("submittedDateTo", parameterToString(*r.submittedDateTo, ""))
	}
	if r.paymentMemo != nil {
		localVarQueryParams.Add("paymentMemo", parameterToString(*r.paymentMemo, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.sensitive != nil {
		localVarQueryParams.Add("sensitive", parameterToString(*r.sensitive, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
