/*
 * Velo Payments APIs
 *
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * API version: 2.20.118
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package velopayments

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// PaymentAuditServiceApiService PaymentAuditServiceApi service
type PaymentAuditServiceApiService service

// ExportTransactionsCSVV3Opts Optional parameters for the method 'ExportTransactionsCSVV3'
type ExportTransactionsCSVV3Opts struct {
    PayorId optional.Interface
    StartDate optional.String
    EndDate optional.String
}

/*
ExportTransactionsCSVV3 Export Transactions
Download a CSV file containing payments in a date range. Uses Transfer-Encoding - chunked to stream to the client. Date range is inclusive of both the start and end dates.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ExportTransactionsCSVV3Opts - Optional Parameters:
 * @param "PayorId" (optional.Interface of string) -  The Payor ID for whom you wish to run the report. For a Payor requesting the report, this could be their exact Payor, or it could be a child/descendant Payor. 
 * @param "StartDate" (optional.String) -  Start date, inclusive. Format is YYYY-MM-DD
 * @param "EndDate" (optional.String) -  End date, inclusive. Format is YYYY-MM-DD
@return PayorAmlTransactionV3
*/
func (a *PaymentAuditServiceApiService) ExportTransactionsCSVV3(ctx _context.Context, localVarOptionals *ExportTransactionsCSVV3Opts) (PayorAmlTransactionV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayorAmlTransactionV3
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v3/paymentaudit/transactions"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PayorId.IsSet() {
		localVarQueryParams.Add("payorId", parameterToString(localVarOptionals.PayorId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("endDate", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v PayorAmlTransactionV3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ExportTransactionsCSVV4Opts Optional parameters for the method 'ExportTransactionsCSVV4'
type ExportTransactionsCSVV4Opts struct {
    PayorId optional.Interface
    StartDate optional.String
    SubmittedDateFrom optional.String
    Include optional.String
}

/*
ExportTransactionsCSVV4 Export Transactions
Download a CSV file containing payments in a date range. Uses Transfer-Encoding - chunked to stream to the client. Date range is inclusive of both the start and end dates.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ExportTransactionsCSVV4Opts - Optional Parameters:
 * @param "PayorId" (optional.Interface of string) -  The Payor ID for whom you wish to run the report. For a Payor requesting the report, this could be their exact Payor, or it could be a child/descendant Payor. 
 * @param "StartDate" (optional.String) -  Start date, inclusive. Format is YYYY-MM-DD
 * @param "SubmittedDateFrom" (optional.String) -  Start date, inclusive. Format is YYYY-MM-DD
 * @param "Include" (optional.String) -  Mode to determine whether to include other Payor's data in the results. May only be used if payorId is specified. Can be omitted or set to 'payorOnly' or 'payorAndDescendants'. payorOnly: Only include results for the specified Payor. This is the default if 'include' is omitted. payorAndDescendants: Aggregate results for all descendant Payors of the specified Payor. Should only be used if the Payor with the specified payorId has at least one child Payor.                      Note when a Payor requests the report and include=payorAndDescendants is used, the following additional columns are included in the CSV: Payor Name, Payor Id 
@return PayorAmlTransactionV4
*/
func (a *PaymentAuditServiceApiService) ExportTransactionsCSVV4(ctx _context.Context, localVarOptionals *ExportTransactionsCSVV4Opts) (PayorAmlTransactionV4, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayorAmlTransactionV4
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v4/paymentaudit/transactions"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PayorId.IsSet() {
		localVarQueryParams.Add("payorId", parameterToString(localVarOptionals.PayorId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Include.IsSet() {
		localVarQueryParams.Add("include", parameterToString(localVarOptionals.Include.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v PayorAmlTransactionV4
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


/*
GetFundingsV1 Get Fundings for Payor
Get a list of Fundings for a payor. 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetFundingsV1Opts - Optional Parameters:
 * @param "PayorId" (optional.Interface of string) -  The account owner Payor ID
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields. Example: ```?sort=destinationCurrency:asc,destinationAmount:asc``` Default is no sort. The supported sort fields are: dateTime and amount. 
@return GetFundingsResponse
*/
func (a *PaymentAuditServiceApiService) GetFundingsV1(ctx _context.Context, localVarOptionals *GetFundingsV1Opts) (GetFundingsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetFundingsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/paymentaudit/fundings"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PayorId.IsSet() {
		localVarQueryParams.Add("payorId", parameterToString(localVarOptionals.PayorId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetFundingsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetPaymentDetailsOpts Optional parameters for the method 'GetPaymentDetails'
type GetPaymentDetailsOpts struct {
    Sensitive optional.Bool
}

/*
GetPaymentDetails Get Payment
Get the payment with the given id. This contains the payment history. 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param paymentId Payment Id
 * @param optional nil or *GetPaymentDetailsOpts - Optional Parameters:
 * @param "Sensitive" (optional.Bool) -  Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
@return PaymentResponseV3
*/
func (a *PaymentAuditServiceApiService) GetPaymentDetails(ctx _context.Context, paymentId string, localVarOptionals *GetPaymentDetailsOpts) (PaymentResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaymentResponseV3
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v3/paymentaudit/payments/{paymentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentId"+"}", _neturl.QueryEscape(parameterToString(paymentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Sensitive.IsSet() {
		localVarQueryParams.Add("sensitive", parameterToString(localVarOptionals.Sensitive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v PaymentResponseV3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetPaymentDetailsV4Opts Optional parameters for the method 'GetPaymentDetailsV4'
type GetPaymentDetailsV4Opts struct {
    Sensitive optional.Bool
}

/*
GetPaymentDetailsV4 Get Payment
Get the payment with the given id. This contains the payment history. 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param paymentId Payment Id
 * @param optional nil or *GetPaymentDetailsV4Opts - Optional Parameters:
 * @param "Sensitive" (optional.Bool) -  Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
@return PaymentResponseV4
*/
func (a *PaymentAuditServiceApiService) GetPaymentDetailsV4(ctx _context.Context, paymentId string, localVarOptionals *GetPaymentDetailsV4Opts) (PaymentResponseV4, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaymentResponseV4
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v4/paymentaudit/payments/{paymentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentId"+"}", _neturl.QueryEscape(parameterToString(paymentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Sensitive.IsSet() {
		localVarQueryParams.Add("sensitive", parameterToString(localVarOptionals.Sensitive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v PaymentResponseV4
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


/*
GetPaymentsForPayout Get Payments for Payout
Get List of payments for Payout 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payoutId The id (UUID) of the payout.
 * @param optional nil or *GetPaymentsForPayoutOpts - Optional Parameters:
 * @param "RemoteId" (optional.String) -  The remote id of the payees.
 * @param "Status" (optional.String) -  Payment Status
 * @param "SourceAmountFrom" (optional.Int32) -  The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
 * @param "SourceAmountTo" (optional.Int32) -  The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
 * @param "PaymentAmountFrom" (optional.Int32) -  The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
 * @param "PaymentAmountTo" (optional.Int32) -  The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
 * @param "SubmittedDateFrom" (optional.String) -  The submitted date from range filter. Format is yyyy-MM-dd.
 * @param "SubmittedDateTo" (optional.String) -  The submitted date to range filter. Format is yyyy-MM-dd.
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status 
 * @param "Sensitive" (optional.Bool) -  Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
@return GetPaymentsForPayoutResponseV3
*/
func (a *PaymentAuditServiceApiService) GetPaymentsForPayout(ctx _context.Context, payoutId string, localVarOptionals *GetPaymentsForPayoutOpts) (GetPaymentsForPayoutResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPaymentsForPayoutResponseV3
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v3/paymentaudit/payouts/{payoutId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payoutId"+"}", _neturl.QueryEscape(parameterToString(payoutId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.RemoteId.IsSet() {
		localVarQueryParams.Add("remoteId", parameterToString(localVarOptionals.RemoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountFrom.IsSet() {
		localVarQueryParams.Add("sourceAmountFrom", parameterToString(localVarOptionals.SourceAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountTo.IsSet() {
		localVarQueryParams.Add("sourceAmountTo", parameterToString(localVarOptionals.SourceAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountFrom.IsSet() {
		localVarQueryParams.Add("paymentAmountFrom", parameterToString(localVarOptionals.PaymentAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountTo.IsSet() {
		localVarQueryParams.Add("paymentAmountTo", parameterToString(localVarOptionals.PaymentAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateTo.IsSet() {
		localVarQueryParams.Add("submittedDateTo", parameterToString(localVarOptionals.SubmittedDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sensitive.IsSet() {
		localVarQueryParams.Add("sensitive", parameterToString(localVarOptionals.Sensitive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetPaymentsForPayoutResponseV3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


/*
GetPaymentsForPayoutV4 Get Payments for Payout
Get List of payments for Payout, allowing for RETURNED status 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payoutId The id (UUID) of the payout.
 * @param optional nil or *GetPaymentsForPayoutV4Opts - Optional Parameters:
 * @param "RemoteId" (optional.String) -  The remote id of the payees.
 * @param "Status" (optional.String) -  Payment Status
 * @param "SourceAmountFrom" (optional.Int32) -  The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
 * @param "SourceAmountTo" (optional.Int32) -  The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
 * @param "PaymentAmountFrom" (optional.Int32) -  The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
 * @param "PaymentAmountTo" (optional.Int32) -  The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
 * @param "SubmittedDateFrom" (optional.String) -  The submitted date from range filter. Format is yyyy-MM-dd.
 * @param "SubmittedDateTo" (optional.String) -  The submitted date to range filter. Format is yyyy-MM-dd.
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status 
 * @param "Sensitive" (optional.Bool) -  Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
@return GetPaymentsForPayoutResponseV4
*/
func (a *PaymentAuditServiceApiService) GetPaymentsForPayoutV4(ctx _context.Context, payoutId string, localVarOptionals *GetPaymentsForPayoutV4Opts) (GetPaymentsForPayoutResponseV4, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPaymentsForPayoutResponseV4
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v4/paymentaudit/payouts/{payoutId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payoutId"+"}", _neturl.QueryEscape(parameterToString(payoutId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.RemoteId.IsSet() {
		localVarQueryParams.Add("remoteId", parameterToString(localVarOptionals.RemoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountFrom.IsSet() {
		localVarQueryParams.Add("sourceAmountFrom", parameterToString(localVarOptionals.SourceAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountTo.IsSet() {
		localVarQueryParams.Add("sourceAmountTo", parameterToString(localVarOptionals.SourceAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountFrom.IsSet() {
		localVarQueryParams.Add("paymentAmountFrom", parameterToString(localVarOptionals.PaymentAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountTo.IsSet() {
		localVarQueryParams.Add("paymentAmountTo", parameterToString(localVarOptionals.PaymentAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateTo.IsSet() {
		localVarQueryParams.Add("submittedDateTo", parameterToString(localVarOptionals.SubmittedDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sensitive.IsSet() {
		localVarQueryParams.Add("sensitive", parameterToString(localVarOptionals.Sensitive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetPaymentsForPayoutResponseV4
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetPayoutsForPayorV3Opts Optional parameters for the method 'GetPayoutsForPayorV3'
type GetPayoutsForPayorV3Opts struct {
    PayoutMemo optional.String
    Status optional.String
    SubmittedDateFrom optional.String
    SubmittedDateTo optional.String
    Page optional.Int32
    PageSize optional.Int32
    Sort optional.String
}

/*
GetPayoutsForPayorV3 Get Payouts for Payor
Get List of payouts for payor 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payorId The account owner Payor ID
 * @param optional nil or *GetPayoutsForPayorV3Opts - Optional Parameters:
 * @param "PayoutMemo" (optional.String) -  Payout Memo filter - case insensitive sub-string match
 * @param "Status" (optional.String) -  Payout Status
 * @param "SubmittedDateFrom" (optional.String) -  The submitted date from range filter. Format is yyyy-MM-dd.
 * @param "SubmittedDateTo" (optional.String) -  The submitted date to range filter. Format is yyyy-MM-dd.
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields (e.g. ?sort=submittedDateTime:asc,instructedDateTime:asc,status:asc) Default is submittedDateTime:asc The supported sort fields are: submittedDateTime, instructedDateTime, status. 
@return GetPayoutsResponseV3
*/
func (a *PaymentAuditServiceApiService) GetPayoutsForPayorV3(ctx _context.Context, payorId string, localVarOptionals *GetPayoutsForPayorV3Opts) (GetPayoutsResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPayoutsResponseV3
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v3/paymentaudit/payouts"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("payorId", parameterToString(payorId, ""))
	if localVarOptionals != nil && localVarOptionals.PayoutMemo.IsSet() {
		localVarQueryParams.Add("payoutMemo", parameterToString(localVarOptionals.PayoutMemo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateTo.IsSet() {
		localVarQueryParams.Add("submittedDateTo", parameterToString(localVarOptionals.SubmittedDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetPayoutsResponseV3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetPayoutsForPayorV4Opts Optional parameters for the method 'GetPayoutsForPayorV4'
type GetPayoutsForPayorV4Opts struct {
    PayorId optional.Interface
    PayoutMemo optional.String
    Status optional.String
    SubmittedDateFrom optional.String
    SubmittedDateTo optional.String
    FromPayorName optional.String
    Page optional.Int32
    PageSize optional.Int32
    Sort optional.String
}

/*
GetPayoutsForPayorV4 Get Payouts for Payor
Get List of payouts for payor 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetPayoutsForPayorV4Opts - Optional Parameters:
 * @param "PayorId" (optional.Interface of string) -  The id (UUID) of the payor funding the payout or the payor whose payees are being paid.
 * @param "PayoutMemo" (optional.String) -  Payout Memo filter - case insensitive sub-string match
 * @param "Status" (optional.String) -  Payout Status
 * @param "SubmittedDateFrom" (optional.String) -  The submitted date from range filter. Format is yyyy-MM-dd.
 * @param "SubmittedDateTo" (optional.String) -  The submitted date to range filter. Format is yyyy-MM-dd.
 * @param "FromPayorName" (optional.String) -  The name of the payor whose payees are being paid. This filters via a case insensitive substring match.
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields (e.g. ?sort=submittedDateTime:asc,instructedDateTime:asc,status:asc) Default is submittedDateTime:asc The supported sort fields are: submittedDateTime, instructedDateTime, status, totalPayments, payoutId 
@return GetPayoutsResponseV4
*/
func (a *PaymentAuditServiceApiService) GetPayoutsForPayorV4(ctx _context.Context, localVarOptionals *GetPayoutsForPayorV4Opts) (GetPayoutsResponseV4, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPayoutsResponseV4
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v4/paymentaudit/payouts"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PayorId.IsSet() {
		localVarQueryParams.Add("payorId", parameterToString(localVarOptionals.PayorId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PayoutMemo.IsSet() {
		localVarQueryParams.Add("payoutMemo", parameterToString(localVarOptionals.PayoutMemo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateTo.IsSet() {
		localVarQueryParams.Add("submittedDateTo", parameterToString(localVarOptionals.SubmittedDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FromPayorName.IsSet() {
		localVarQueryParams.Add("fromPayorName", parameterToString(localVarOptionals.FromPayorName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetPayoutsResponseV4
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ListPaymentChangesOpts Optional parameters for the method 'ListPaymentChanges'
type ListPaymentChangesOpts struct {
    Page optional.Int32
    PageSize optional.Int32
}

/*
ListPaymentChanges List Payment Changes
Get a paginated response listing payment changes.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payorId The Payor ID to find associated Payments
 * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm
 * @param optional nil or *ListPaymentChangesOpts - Optional Parameters:
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 100. Max allowable is 1000.
@return PaymentDeltaResponse
*/
func (a *PaymentAuditServiceApiService) ListPaymentChanges(ctx _context.Context, payorId string, updatedSince time.Time, localVarOptionals *ListPaymentChangesOpts) (PaymentDeltaResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaymentDeltaResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/deltas/payments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("payorId", parameterToString(payorId, ""))
	localVarQueryParams.Add("updatedSince", parameterToString(updatedSince, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v PaymentDeltaResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ListPaymentsAuditOpts Optional parameters for the method 'ListPaymentsAudit'
type ListPaymentsAuditOpts struct {
    PayeeId optional.Interface
    PayorId optional.Interface
    PayorName optional.String
    RemoteId optional.String
    Status optional.String
    SourceAccountName optional.String
    SourceAmountFrom optional.Int32
    SourceAmountTo optional.Int32
    SourceCurrency optional.String
    PaymentAmountFrom optional.Int32
    PaymentAmountTo optional.Int32
    PaymentCurrency optional.String
    SubmittedDateFrom optional.String
    SubmittedDateTo optional.String
    PaymentMemo optional.String
    Page optional.Int32
    PageSize optional.Int32
    Sort optional.String
    Sensitive optional.Bool
}

/*
ListPaymentsAudit Get List of Payments
Get payments for the given payor Id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ListPaymentsAuditOpts - Optional Parameters:
 * @param "PayeeId" (optional.Interface of string) -  The UUID of the payee.
 * @param "PayorId" (optional.Interface of string) -  The account owner Payor Id. Required for external users.
 * @param "PayorName" (optional.String) -  The payor’s name. This filters via a case insensitive substring match.
 * @param "RemoteId" (optional.String) -  The remote id of the payees.
 * @param "Status" (optional.String) -  Payment Status
 * @param "SourceAccountName" (optional.String) -  The source account name filter. This filters via a case insensitive substring match.
 * @param "SourceAmountFrom" (optional.Int32) -  The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
 * @param "SourceAmountTo" (optional.Int32) -  The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
 * @param "SourceCurrency" (optional.String) -  The source currency filter. Filters based on an exact match on the currency.
 * @param "PaymentAmountFrom" (optional.Int32) -  The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
 * @param "PaymentAmountTo" (optional.Int32) -  The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
 * @param "PaymentCurrency" (optional.String) -  The payment currency filter. Filters based on an exact match on the currency.
 * @param "SubmittedDateFrom" (optional.String) -  The submitted date from range filter. Format is yyyy-MM-dd.
 * @param "SubmittedDateTo" (optional.String) -  The submitted date to range filter. Format is yyyy-MM-dd.
 * @param "PaymentMemo" (optional.String) -  The payment memo filter. This filters via a case insensitive substring match.
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status 
 * @param "Sensitive" (optional.Bool) -  Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
@return ListPaymentsResponse
*/
func (a *PaymentAuditServiceApiService) ListPaymentsAudit(ctx _context.Context, localVarOptionals *ListPaymentsAuditOpts) (ListPaymentsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListPaymentsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v3/paymentaudit/payments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PayeeId.IsSet() {
		localVarQueryParams.Add("payeeId", parameterToString(localVarOptionals.PayeeId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PayorId.IsSet() {
		localVarQueryParams.Add("payorId", parameterToString(localVarOptionals.PayorId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PayorName.IsSet() {
		localVarQueryParams.Add("payorName", parameterToString(localVarOptionals.PayorName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RemoteId.IsSet() {
		localVarQueryParams.Add("remoteId", parameterToString(localVarOptionals.RemoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAccountName.IsSet() {
		localVarQueryParams.Add("sourceAccountName", parameterToString(localVarOptionals.SourceAccountName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountFrom.IsSet() {
		localVarQueryParams.Add("sourceAmountFrom", parameterToString(localVarOptionals.SourceAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountTo.IsSet() {
		localVarQueryParams.Add("sourceAmountTo", parameterToString(localVarOptionals.SourceAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceCurrency.IsSet() {
		localVarQueryParams.Add("sourceCurrency", parameterToString(localVarOptionals.SourceCurrency.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountFrom.IsSet() {
		localVarQueryParams.Add("paymentAmountFrom", parameterToString(localVarOptionals.PaymentAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountTo.IsSet() {
		localVarQueryParams.Add("paymentAmountTo", parameterToString(localVarOptionals.PaymentAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentCurrency.IsSet() {
		localVarQueryParams.Add("paymentCurrency", parameterToString(localVarOptionals.PaymentCurrency.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateTo.IsSet() {
		localVarQueryParams.Add("submittedDateTo", parameterToString(localVarOptionals.SubmittedDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentMemo.IsSet() {
		localVarQueryParams.Add("paymentMemo", parameterToString(localVarOptionals.PaymentMemo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sensitive.IsSet() {
		localVarQueryParams.Add("sensitive", parameterToString(localVarOptionals.Sensitive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v ListPaymentsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ListPaymentsAuditV4Opts Optional parameters for the method 'ListPaymentsAuditV4'
type ListPaymentsAuditV4Opts struct {
    PayeeId optional.Interface
    PayorId optional.Interface
    PayorName optional.String
    RemoteId optional.String
    Status optional.String
    SourceAccountName optional.String
    SourceAmountFrom optional.Int32
    SourceAmountTo optional.Int32
    SourceCurrency optional.String
    PaymentAmountFrom optional.Int32
    PaymentAmountTo optional.Int32
    PaymentCurrency optional.String
    SubmittedDateFrom optional.String
    SubmittedDateTo optional.String
    PaymentMemo optional.String
    Page optional.Int32
    PageSize optional.Int32
    Sort optional.String
    Sensitive optional.Bool
}

/*
ListPaymentsAuditV4 Get List of Payments
Get payments for the given payor Id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ListPaymentsAuditV4Opts - Optional Parameters:
 * @param "PayeeId" (optional.Interface of string) -  The UUID of the payee.
 * @param "PayorId" (optional.Interface of string) -  The account owner Payor Id. Required for external users.
 * @param "PayorName" (optional.String) -  The payor’s name. This filters via a case insensitive substring match.
 * @param "RemoteId" (optional.String) -  The remote id of the payees.
 * @param "Status" (optional.String) -  Payment Status
 * @param "SourceAccountName" (optional.String) -  The source account name filter. This filters via a case insensitive substring match.
 * @param "SourceAmountFrom" (optional.Int32) -  The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
 * @param "SourceAmountTo" (optional.Int32) -  The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
 * @param "SourceCurrency" (optional.String) -  The source currency filter. Filters based on an exact match on the currency.
 * @param "PaymentAmountFrom" (optional.Int32) -  The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
 * @param "PaymentAmountTo" (optional.Int32) -  The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
 * @param "PaymentCurrency" (optional.String) -  The payment currency filter. Filters based on an exact match on the currency.
 * @param "SubmittedDateFrom" (optional.String) -  The submitted date from range filter. Format is yyyy-MM-dd.
 * @param "SubmittedDateTo" (optional.String) -  The submitted date to range filter. Format is yyyy-MM-dd.
 * @param "PaymentMemo" (optional.String) -  The payment memo filter. This filters via a case insensitive substring match.
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by submittedDateTime:desc,paymentId:asc The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime, status and paymentId 
 * @param "Sensitive" (optional.Bool) -  Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
@return ListPaymentsResponseV4
*/
func (a *PaymentAuditServiceApiService) ListPaymentsAuditV4(ctx _context.Context, localVarOptionals *ListPaymentsAuditV4Opts) (ListPaymentsResponseV4, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListPaymentsResponseV4
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v4/paymentaudit/payments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PayeeId.IsSet() {
		localVarQueryParams.Add("payeeId", parameterToString(localVarOptionals.PayeeId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PayorId.IsSet() {
		localVarQueryParams.Add("payorId", parameterToString(localVarOptionals.PayorId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PayorName.IsSet() {
		localVarQueryParams.Add("payorName", parameterToString(localVarOptionals.PayorName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RemoteId.IsSet() {
		localVarQueryParams.Add("remoteId", parameterToString(localVarOptionals.RemoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAccountName.IsSet() {
		localVarQueryParams.Add("sourceAccountName", parameterToString(localVarOptionals.SourceAccountName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountFrom.IsSet() {
		localVarQueryParams.Add("sourceAmountFrom", parameterToString(localVarOptionals.SourceAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountTo.IsSet() {
		localVarQueryParams.Add("sourceAmountTo", parameterToString(localVarOptionals.SourceAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceCurrency.IsSet() {
		localVarQueryParams.Add("sourceCurrency", parameterToString(localVarOptionals.SourceCurrency.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountFrom.IsSet() {
		localVarQueryParams.Add("paymentAmountFrom", parameterToString(localVarOptionals.PaymentAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountTo.IsSet() {
		localVarQueryParams.Add("paymentAmountTo", parameterToString(localVarOptionals.PaymentAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentCurrency.IsSet() {
		localVarQueryParams.Add("paymentCurrency", parameterToString(localVarOptionals.PaymentCurrency.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateTo.IsSet() {
		localVarQueryParams.Add("submittedDateTo", parameterToString(localVarOptionals.SubmittedDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentMemo.IsSet() {
		localVarQueryParams.Add("paymentMemo", parameterToString(localVarOptionals.PaymentMemo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sensitive.IsSet() {
		localVarQueryParams.Add("sensitive", parameterToString(localVarOptionals.Sensitive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v ListPaymentsResponseV4
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
