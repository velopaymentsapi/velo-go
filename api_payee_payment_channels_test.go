/*
Velo Payments APIs

Testing PayeePaymentChannelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package velopayments

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_velopayments_PayeePaymentChannelsAPIService(t *testing.T) {

	configuration := NewConfiguration()
	configuration.Servers = ServerConfigurations{
		{
			URL:         os.Getenv("APIURL"),
			Description: "Velo Payments for testing",
		},
	}
	apiClient := NewAPIClient(configuration)

	t.Run("Test PayeePaymentChannelsAPIService CreatePaymentChannelV4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var payeeId string

		httpRes, err := apiClient.PayeePaymentChannelsAPI.CreatePaymentChannelV4(context.Background(), payeeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayeePaymentChannelsAPIService DeletePaymentChannelV4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var payeeId string
		var paymentChannelId string

		httpRes, err := apiClient.PayeePaymentChannelsAPI.DeletePaymentChannelV4(context.Background(), payeeId, paymentChannelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayeePaymentChannelsAPIService EnablePaymentChannelV4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var payeeId string
		var paymentChannelId string

		httpRes, err := apiClient.PayeePaymentChannelsAPI.EnablePaymentChannelV4(context.Background(), payeeId, paymentChannelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayeePaymentChannelsAPIService GetPaymentChannelV4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var payeeId string
		var paymentChannelId string

		resp, httpRes, err := apiClient.PayeePaymentChannelsAPI.GetPaymentChannelV4(context.Background(), payeeId, paymentChannelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayeePaymentChannelsAPIService GetPaymentChannelsV4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var payeeId string

		resp, httpRes, err := apiClient.PayeePaymentChannelsAPI.GetPaymentChannelsV4(context.Background(), payeeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayeePaymentChannelsAPIService UpdatePaymentChannelOrderV4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var payeeId string

		httpRes, err := apiClient.PayeePaymentChannelsAPI.UpdatePaymentChannelOrderV4(context.Background(), payeeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PayeePaymentChannelsAPIService UpdatePaymentChannelV4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var payeeId string
		var paymentChannelId string

		httpRes, err := apiClient.PayeePaymentChannelsAPI.UpdatePaymentChannelV4(context.Background(), payeeId, paymentChannelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
