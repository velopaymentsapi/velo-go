/*
 * Velo Payments APIs
 *
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * API version: 2.26.124
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package velopayments

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// PayeesApiService PayeesApi service
type PayeesApiService service

type ApiDeletePayeeByIdV3Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payeeId string
}


func (r ApiDeletePayeeByIdV3Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeletePayeeByIdV3Execute(r)
}

/*
 * DeletePayeeByIdV3 Delete Payee by Id
 * <p>Use v4 instead</p>
<p>This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:</p>
<p>* Payee ID is not found</p>
<p>* If Payee has not been on-boarded</p>
<p>* If Payee is in grace period</p>
<p>* If Payee has existing payments</p>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payeeId The UUID of the payee.
 * @return ApiDeletePayeeByIdV3Request
 */
func (a *PayeesApiService) DeletePayeeByIdV3(ctx _context.Context, payeeId string) ApiDeletePayeeByIdV3Request {
	return ApiDeletePayeeByIdV3Request{
		ApiService: a,
		ctx: ctx,
		payeeId: payeeId,
	}
}

/*
 * Execute executes the request
 */
func (a *PayeesApiService) DeletePayeeByIdV3Execute(r ApiDeletePayeeByIdV3Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.DeletePayeeByIdV3")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/payees/{payeeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payeeId"+"}", _neturl.PathEscape(parameterToString(r.payeeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePayeeByIdV4Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payeeId string
}


func (r ApiDeletePayeeByIdV4Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeletePayeeByIdV4Execute(r)
}

/*
 * DeletePayeeByIdV4 Delete Payee by Id
 * <p>This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:</p>
<p>* Payee ID is not found</p>
<p>* If Payee has not been on-boarded</p>
<p>* If Payee is in grace period</p>
<p>* If Payee has existing payments</p>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payeeId The UUID of the payee.
 * @return ApiDeletePayeeByIdV4Request
 */
func (a *PayeesApiService) DeletePayeeByIdV4(ctx _context.Context, payeeId string) ApiDeletePayeeByIdV4Request {
	return ApiDeletePayeeByIdV4Request{
		ApiService: a,
		ctx: ctx,
		payeeId: payeeId,
	}
}

/*
 * Execute executes the request
 */
func (a *PayeesApiService) DeletePayeeByIdV4Execute(r ApiDeletePayeeByIdV4Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.DeletePayeeByIdV4")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/payees/{payeeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payeeId"+"}", _neturl.PathEscape(parameterToString(r.payeeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPayeeByIdV3Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payeeId string
	sensitive *bool
}

func (r ApiGetPayeeByIdV3Request) Sensitive(sensitive bool) ApiGetPayeeByIdV3Request {
	r.sensitive = &sensitive
	return r
}

func (r ApiGetPayeeByIdV3Request) Execute() (PayeeDetailResponse, *_nethttp.Response, error) {
	return r.ApiService.GetPayeeByIdV3Execute(r)
}

/*
 * GetPayeeByIdV3 Get Payee by Id
 * <p>Use v4 instead</p>
<p>Get Payee by Id</p>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payeeId The UUID of the payee.
 * @return ApiGetPayeeByIdV3Request
 */
func (a *PayeesApiService) GetPayeeByIdV3(ctx _context.Context, payeeId string) ApiGetPayeeByIdV3Request {
	return ApiGetPayeeByIdV3Request{
		ApiService: a,
		ctx: ctx,
		payeeId: payeeId,
	}
}

/*
 * Execute executes the request
 * @return PayeeDetailResponse
 */
func (a *PayeesApiService) GetPayeeByIdV3Execute(r ApiGetPayeeByIdV3Request) (PayeeDetailResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayeeDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.GetPayeeByIdV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/payees/{payeeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payeeId"+"}", _neturl.PathEscape(parameterToString(r.payeeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sensitive != nil {
		localVarQueryParams.Add("sensitive", parameterToString(*r.sensitive, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPayeeByIdV4Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payeeId string
	sensitive *bool
}

func (r ApiGetPayeeByIdV4Request) Sensitive(sensitive bool) ApiGetPayeeByIdV4Request {
	r.sensitive = &sensitive
	return r
}

func (r ApiGetPayeeByIdV4Request) Execute() (PayeeDetailResponse2, *_nethttp.Response, error) {
	return r.ApiService.GetPayeeByIdV4Execute(r)
}

/*
 * GetPayeeByIdV4 Get Payee by Id
 * Get Payee by Id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payeeId The UUID of the payee.
 * @return ApiGetPayeeByIdV4Request
 */
func (a *PayeesApiService) GetPayeeByIdV4(ctx _context.Context, payeeId string) ApiGetPayeeByIdV4Request {
	return ApiGetPayeeByIdV4Request{
		ApiService: a,
		ctx: ctx,
		payeeId: payeeId,
	}
}

/*
 * Execute executes the request
 * @return PayeeDetailResponse2
 */
func (a *PayeesApiService) GetPayeeByIdV4Execute(r ApiGetPayeeByIdV4Request) (PayeeDetailResponse2, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayeeDetailResponse2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.GetPayeeByIdV4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/payees/{payeeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payeeId"+"}", _neturl.PathEscape(parameterToString(r.payeeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sensitive != nil {
		localVarQueryParams.Add("sensitive", parameterToString(*r.sensitive, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPayeeChangesV3Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payorId *string
	updatedSince *time.Time
	page *int32
	pageSize *int32
}

func (r ApiListPayeeChangesV3Request) PayorId(payorId string) ApiListPayeeChangesV3Request {
	r.payorId = &payorId
	return r
}
func (r ApiListPayeeChangesV3Request) UpdatedSince(updatedSince time.Time) ApiListPayeeChangesV3Request {
	r.updatedSince = &updatedSince
	return r
}
func (r ApiListPayeeChangesV3Request) Page(page int32) ApiListPayeeChangesV3Request {
	r.page = &page
	return r
}
func (r ApiListPayeeChangesV3Request) PageSize(pageSize int32) ApiListPayeeChangesV3Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiListPayeeChangesV3Request) Execute() (PayeeDeltaResponse, *_nethttp.Response, error) {
	return r.ApiService.ListPayeeChangesV3Execute(r)
}

/*
 * ListPayeeChangesV3 List Payee Changes
 * <p>Use v4 instead</p>
<p>Get a paginated response listing payee changes.</p>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPayeeChangesV3Request
 */
func (a *PayeesApiService) ListPayeeChangesV3(ctx _context.Context) ApiListPayeeChangesV3Request {
	return ApiListPayeeChangesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PayeeDeltaResponse
 */
func (a *PayeesApiService) ListPayeeChangesV3Execute(r ApiListPayeeChangesV3Request) (PayeeDeltaResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayeeDeltaResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.ListPayeeChangesV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/payees/deltas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.payorId == nil {
		return localVarReturnValue, nil, reportError("payorId is required and must be specified")
	}
	if r.updatedSince == nil {
		return localVarReturnValue, nil, reportError("updatedSince is required and must be specified")
	}

	localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	localVarQueryParams.Add("updatedSince", parameterToString(*r.updatedSince, ""))
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPayeeChangesV4Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payorId *string
	updatedSince *time.Time
	page *int32
	pageSize *int32
}

func (r ApiListPayeeChangesV4Request) PayorId(payorId string) ApiListPayeeChangesV4Request {
	r.payorId = &payorId
	return r
}
func (r ApiListPayeeChangesV4Request) UpdatedSince(updatedSince time.Time) ApiListPayeeChangesV4Request {
	r.updatedSince = &updatedSince
	return r
}
func (r ApiListPayeeChangesV4Request) Page(page int32) ApiListPayeeChangesV4Request {
	r.page = &page
	return r
}
func (r ApiListPayeeChangesV4Request) PageSize(pageSize int32) ApiListPayeeChangesV4Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiListPayeeChangesV4Request) Execute() (PayeeDeltaResponse2, *_nethttp.Response, error) {
	return r.ApiService.ListPayeeChangesV4Execute(r)
}

/*
 * ListPayeeChangesV4 List Payee Changes
 * Get a paginated response listing payee changes (updated since a particular time) to a limited set of fields:
- dbaName
- displayName
- email
- onboardedStatus
- payeeCountry
- payeeId
- remoteId

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPayeeChangesV4Request
 */
func (a *PayeesApiService) ListPayeeChangesV4(ctx _context.Context) ApiListPayeeChangesV4Request {
	return ApiListPayeeChangesV4Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PayeeDeltaResponse2
 */
func (a *PayeesApiService) ListPayeeChangesV4Execute(r ApiListPayeeChangesV4Request) (PayeeDeltaResponse2, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayeeDeltaResponse2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.ListPayeeChangesV4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/payees/deltas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.payorId == nil {
		return localVarReturnValue, nil, reportError("payorId is required and must be specified")
	}
	if r.updatedSince == nil {
		return localVarReturnValue, nil, reportError("updatedSince is required and must be specified")
	}

	localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	localVarQueryParams.Add("updatedSince", parameterToString(*r.updatedSince, ""))
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPayeesV3Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payorId *string
	watchlistStatus *WatchlistStatus
	disabled *bool
	onboardedStatus *OnboardedStatus
	email *string
	displayName *string
	remoteId *string
	payeeType *PayeeType
	payeeCountry *string
	page *int32
	pageSize *int32
	sort *string
}

func (r ApiListPayeesV3Request) PayorId(payorId string) ApiListPayeesV3Request {
	r.payorId = &payorId
	return r
}
func (r ApiListPayeesV3Request) WatchlistStatus(watchlistStatus WatchlistStatus) ApiListPayeesV3Request {
	r.watchlistStatus = &watchlistStatus
	return r
}
func (r ApiListPayeesV3Request) Disabled(disabled bool) ApiListPayeesV3Request {
	r.disabled = &disabled
	return r
}
func (r ApiListPayeesV3Request) OnboardedStatus(onboardedStatus OnboardedStatus) ApiListPayeesV3Request {
	r.onboardedStatus = &onboardedStatus
	return r
}
func (r ApiListPayeesV3Request) Email(email string) ApiListPayeesV3Request {
	r.email = &email
	return r
}
func (r ApiListPayeesV3Request) DisplayName(displayName string) ApiListPayeesV3Request {
	r.displayName = &displayName
	return r
}
func (r ApiListPayeesV3Request) RemoteId(remoteId string) ApiListPayeesV3Request {
	r.remoteId = &remoteId
	return r
}
func (r ApiListPayeesV3Request) PayeeType(payeeType PayeeType) ApiListPayeesV3Request {
	r.payeeType = &payeeType
	return r
}
func (r ApiListPayeesV3Request) PayeeCountry(payeeCountry string) ApiListPayeesV3Request {
	r.payeeCountry = &payeeCountry
	return r
}
func (r ApiListPayeesV3Request) Page(page int32) ApiListPayeesV3Request {
	r.page = &page
	return r
}
func (r ApiListPayeesV3Request) PageSize(pageSize int32) ApiListPayeesV3Request {
	r.pageSize = &pageSize
	return r
}
func (r ApiListPayeesV3Request) Sort(sort string) ApiListPayeesV3Request {
	r.sort = &sort
	return r
}

func (r ApiListPayeesV3Request) Execute() (PagedPayeeResponse, *_nethttp.Response, error) {
	return r.ApiService.ListPayeesV3Execute(r)
}

/*
 * ListPayeesV3 List Payees
 * <p>Use v4 instead</p>
Get a paginated response listing the payees for a payor.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPayeesV3Request
 */
func (a *PayeesApiService) ListPayeesV3(ctx _context.Context) ApiListPayeesV3Request {
	return ApiListPayeesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PagedPayeeResponse
 */
func (a *PayeesApiService) ListPayeesV3Execute(r ApiListPayeesV3Request) (PagedPayeeResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PagedPayeeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.ListPayeesV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/payees"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.payorId == nil {
		return localVarReturnValue, nil, reportError("payorId is required and must be specified")
	}

	localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	if r.watchlistStatus != nil {
		localVarQueryParams.Add("watchlistStatus", parameterToString(*r.watchlistStatus, ""))
	}
	if r.disabled != nil {
		localVarQueryParams.Add("disabled", parameterToString(*r.disabled, ""))
	}
	if r.onboardedStatus != nil {
		localVarQueryParams.Add("onboardedStatus", parameterToString(*r.onboardedStatus, ""))
	}
	if r.email != nil {
		localVarQueryParams.Add("email", parameterToString(*r.email, ""))
	}
	if r.displayName != nil {
		localVarQueryParams.Add("displayName", parameterToString(*r.displayName, ""))
	}
	if r.remoteId != nil {
		localVarQueryParams.Add("remoteId", parameterToString(*r.remoteId, ""))
	}
	if r.payeeType != nil {
		localVarQueryParams.Add("payeeType", parameterToString(*r.payeeType, ""))
	}
	if r.payeeCountry != nil {
		localVarQueryParams.Add("payeeCountry", parameterToString(*r.payeeCountry, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPayeesV4Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payorId *string
	watchlistStatus *WatchlistStatus
	disabled *bool
	onboardedStatus *OnboardedStatus
	email *string
	displayName *string
	remoteId *string
	payeeType *PayeeType
	payeeCountry *string
	ofacStatus *OfacStatus
	page *int32
	pageSize *int32
	sort *string
}

func (r ApiListPayeesV4Request) PayorId(payorId string) ApiListPayeesV4Request {
	r.payorId = &payorId
	return r
}
func (r ApiListPayeesV4Request) WatchlistStatus(watchlistStatus WatchlistStatus) ApiListPayeesV4Request {
	r.watchlistStatus = &watchlistStatus
	return r
}
func (r ApiListPayeesV4Request) Disabled(disabled bool) ApiListPayeesV4Request {
	r.disabled = &disabled
	return r
}
func (r ApiListPayeesV4Request) OnboardedStatus(onboardedStatus OnboardedStatus) ApiListPayeesV4Request {
	r.onboardedStatus = &onboardedStatus
	return r
}
func (r ApiListPayeesV4Request) Email(email string) ApiListPayeesV4Request {
	r.email = &email
	return r
}
func (r ApiListPayeesV4Request) DisplayName(displayName string) ApiListPayeesV4Request {
	r.displayName = &displayName
	return r
}
func (r ApiListPayeesV4Request) RemoteId(remoteId string) ApiListPayeesV4Request {
	r.remoteId = &remoteId
	return r
}
func (r ApiListPayeesV4Request) PayeeType(payeeType PayeeType) ApiListPayeesV4Request {
	r.payeeType = &payeeType
	return r
}
func (r ApiListPayeesV4Request) PayeeCountry(payeeCountry string) ApiListPayeesV4Request {
	r.payeeCountry = &payeeCountry
	return r
}
func (r ApiListPayeesV4Request) OfacStatus(ofacStatus OfacStatus) ApiListPayeesV4Request {
	r.ofacStatus = &ofacStatus
	return r
}
func (r ApiListPayeesV4Request) Page(page int32) ApiListPayeesV4Request {
	r.page = &page
	return r
}
func (r ApiListPayeesV4Request) PageSize(pageSize int32) ApiListPayeesV4Request {
	r.pageSize = &pageSize
	return r
}
func (r ApiListPayeesV4Request) Sort(sort string) ApiListPayeesV4Request {
	r.sort = &sort
	return r
}

func (r ApiListPayeesV4Request) Execute() (PagedPayeeResponse2, *_nethttp.Response, error) {
	return r.ApiService.ListPayeesV4Execute(r)
}

/*
 * ListPayeesV4 List Payees
 * Get a paginated response listing the payees for a payor.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPayeesV4Request
 */
func (a *PayeesApiService) ListPayeesV4(ctx _context.Context) ApiListPayeesV4Request {
	return ApiListPayeesV4Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PagedPayeeResponse2
 */
func (a *PayeesApiService) ListPayeesV4Execute(r ApiListPayeesV4Request) (PagedPayeeResponse2, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PagedPayeeResponse2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.ListPayeesV4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/payees"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.payorId == nil {
		return localVarReturnValue, nil, reportError("payorId is required and must be specified")
	}

	localVarQueryParams.Add("payorId", parameterToString(*r.payorId, ""))
	if r.watchlistStatus != nil {
		localVarQueryParams.Add("watchlistStatus", parameterToString(*r.watchlistStatus, ""))
	}
	if r.disabled != nil {
		localVarQueryParams.Add("disabled", parameterToString(*r.disabled, ""))
	}
	if r.onboardedStatus != nil {
		localVarQueryParams.Add("onboardedStatus", parameterToString(*r.onboardedStatus, ""))
	}
	if r.email != nil {
		localVarQueryParams.Add("email", parameterToString(*r.email, ""))
	}
	if r.displayName != nil {
		localVarQueryParams.Add("displayName", parameterToString(*r.displayName, ""))
	}
	if r.remoteId != nil {
		localVarQueryParams.Add("remoteId", parameterToString(*r.remoteId, ""))
	}
	if r.payeeType != nil {
		localVarQueryParams.Add("payeeType", parameterToString(*r.payeeType, ""))
	}
	if r.payeeCountry != nil {
		localVarQueryParams.Add("payeeCountry", parameterToString(*r.payeeCountry, ""))
	}
	if r.ofacStatus != nil {
		localVarQueryParams.Add("ofacStatus", parameterToString(*r.ofacStatus, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPayeeDetailsUpdateV3Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payeeId string
	updatePayeeDetailsRequest *UpdatePayeeDetailsRequest
}

func (r ApiPayeeDetailsUpdateV3Request) UpdatePayeeDetailsRequest(updatePayeeDetailsRequest UpdatePayeeDetailsRequest) ApiPayeeDetailsUpdateV3Request {
	r.updatePayeeDetailsRequest = &updatePayeeDetailsRequest
	return r
}

func (r ApiPayeeDetailsUpdateV3Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PayeeDetailsUpdateV3Execute(r)
}

/*
 * PayeeDetailsUpdateV3 Update Payee Details
 * <p>Use v4 instead</p>
<p>Update payee details for the given Payee Id.<p>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payeeId The UUID of the payee.
 * @return ApiPayeeDetailsUpdateV3Request
 */
func (a *PayeesApiService) PayeeDetailsUpdateV3(ctx _context.Context, payeeId string) ApiPayeeDetailsUpdateV3Request {
	return ApiPayeeDetailsUpdateV3Request{
		ApiService: a,
		ctx: ctx,
		payeeId: payeeId,
	}
}

/*
 * Execute executes the request
 */
func (a *PayeesApiService) PayeeDetailsUpdateV3Execute(r ApiPayeeDetailsUpdateV3Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.PayeeDetailsUpdateV3")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/payees/{payeeId}/payeeDetailsUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"payeeId"+"}", _neturl.PathEscape(parameterToString(r.payeeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.updatePayeeDetailsRequest == nil {
		return nil, reportError("updatePayeeDetailsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updatePayeeDetailsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPayeeDetailsUpdateV4Request struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payeeId string
	updatePayeeDetailsRequest2 *UpdatePayeeDetailsRequest2
}

func (r ApiPayeeDetailsUpdateV4Request) UpdatePayeeDetailsRequest2(updatePayeeDetailsRequest2 UpdatePayeeDetailsRequest2) ApiPayeeDetailsUpdateV4Request {
	r.updatePayeeDetailsRequest2 = &updatePayeeDetailsRequest2
	return r
}

func (r ApiPayeeDetailsUpdateV4Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PayeeDetailsUpdateV4Execute(r)
}

/*
 * PayeeDetailsUpdateV4 Update Payee Details
 * <p>Update payee details for the given Payee Id.<p>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payeeId The UUID of the payee.
 * @return ApiPayeeDetailsUpdateV4Request
 */
func (a *PayeesApiService) PayeeDetailsUpdateV4(ctx _context.Context, payeeId string) ApiPayeeDetailsUpdateV4Request {
	return ApiPayeeDetailsUpdateV4Request{
		ApiService: a,
		ctx: ctx,
		payeeId: payeeId,
	}
}

/*
 * Execute executes the request
 */
func (a *PayeesApiService) PayeeDetailsUpdateV4Execute(r ApiPayeeDetailsUpdateV4Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.PayeeDetailsUpdateV4")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/payees/{payeeId}/payeeDetailsUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"payeeId"+"}", _neturl.PathEscape(parameterToString(r.payeeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.updatePayeeDetailsRequest2 == nil {
		return nil, reportError("updatePayeeDetailsRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updatePayeeDetailsRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3PayeesPayeeIdRemoteIdUpdatePostRequest struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payeeId string
	updateRemoteIdRequest *UpdateRemoteIdRequest
}

func (r ApiV3PayeesPayeeIdRemoteIdUpdatePostRequest) UpdateRemoteIdRequest(updateRemoteIdRequest UpdateRemoteIdRequest) ApiV3PayeesPayeeIdRemoteIdUpdatePostRequest {
	r.updateRemoteIdRequest = &updateRemoteIdRequest
	return r
}

func (r ApiV3PayeesPayeeIdRemoteIdUpdatePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V3PayeesPayeeIdRemoteIdUpdatePostExecute(r)
}

/*
 * V3PayeesPayeeIdRemoteIdUpdatePost Update Payee Remote Id
 * <p>Use v4 instead</p>
<p>Update the remote Id for the given Payee Id.</p>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payeeId The UUID of the payee.
 * @return ApiV3PayeesPayeeIdRemoteIdUpdatePostRequest
 */
func (a *PayeesApiService) V3PayeesPayeeIdRemoteIdUpdatePost(ctx _context.Context, payeeId string) ApiV3PayeesPayeeIdRemoteIdUpdatePostRequest {
	return ApiV3PayeesPayeeIdRemoteIdUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
		payeeId: payeeId,
	}
}

/*
 * Execute executes the request
 */
func (a *PayeesApiService) V3PayeesPayeeIdRemoteIdUpdatePostExecute(r ApiV3PayeesPayeeIdRemoteIdUpdatePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.V3PayeesPayeeIdRemoteIdUpdatePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/payees/{payeeId}/remoteIdUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"payeeId"+"}", _neturl.PathEscape(parameterToString(r.payeeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.updateRemoteIdRequest == nil {
		return nil, reportError("updateRemoteIdRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRemoteIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v InlineResponse409
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV4PayeesPayeeIdRemoteIdUpdatePostRequest struct {
	ctx _context.Context
	ApiService *PayeesApiService
	payeeId string
	updateRemoteIdRequest2 *UpdateRemoteIdRequest2
}

func (r ApiV4PayeesPayeeIdRemoteIdUpdatePostRequest) UpdateRemoteIdRequest2(updateRemoteIdRequest2 UpdateRemoteIdRequest2) ApiV4PayeesPayeeIdRemoteIdUpdatePostRequest {
	r.updateRemoteIdRequest2 = &updateRemoteIdRequest2
	return r
}

func (r ApiV4PayeesPayeeIdRemoteIdUpdatePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V4PayeesPayeeIdRemoteIdUpdatePostExecute(r)
}

/*
 * V4PayeesPayeeIdRemoteIdUpdatePost Update Payee Remote Id
 * <p>Update the remote Id for the given Payee Id.</p>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payeeId The UUID of the payee.
 * @return ApiV4PayeesPayeeIdRemoteIdUpdatePostRequest
 */
func (a *PayeesApiService) V4PayeesPayeeIdRemoteIdUpdatePost(ctx _context.Context, payeeId string) ApiV4PayeesPayeeIdRemoteIdUpdatePostRequest {
	return ApiV4PayeesPayeeIdRemoteIdUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
		payeeId: payeeId,
	}
}

/*
 * Execute executes the request
 */
func (a *PayeesApiService) V4PayeesPayeeIdRemoteIdUpdatePostExecute(r ApiV4PayeesPayeeIdRemoteIdUpdatePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayeesApiService.V4PayeesPayeeIdRemoteIdUpdatePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/payees/{payeeId}/remoteIdUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"payeeId"+"}", _neturl.PathEscape(parameterToString(r.payeeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.updateRemoteIdRequest2 == nil {
		return nil, reportError("updateRemoteIdRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRemoteIdRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineResponse403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v InlineResponse409
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
