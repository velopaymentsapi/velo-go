/*
 * Velo Payments APIs
 *
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * API version: 2.26.124
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package velopayments

import (
	"encoding/json"
	"time"
)

// PaymentEventResponse struct for PaymentEventResponse
type PaymentEventResponse struct {
	// The id of the event.
	EventId string `json:"eventId"`
	// The date/time at which the event occurred.
	EventDateTime time.Time `json:"eventDateTime"`
	// The type of the event.
	EventType string `json:"eventType"`
	SourceCurrency *PaymentAuditCurrency `json:"sourceCurrency,omitempty"`
	// The source amount exposed by the event.
	SourceAmount *int64 `json:"sourceAmount,omitempty"`
	PaymentCurrency *PaymentAuditCurrency `json:"paymentCurrency,omitempty"`
	// The destination amount exposed by the event.
	PaymentAmount *int64 `json:"paymentAmount,omitempty"`
	// The account number attached to the event.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// The routing number attached to the event.
	RoutingNumber *string `json:"routingNumber,omitempty"`
	Iban *string `json:"iban,omitempty"`
	AccountName *string `json:"accountName,omitempty"`
	Principal *string `json:"principal,omitempty"`
}

// NewPaymentEventResponse instantiates a new PaymentEventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentEventResponse(eventId string, eventDateTime time.Time, eventType string) *PaymentEventResponse {
	this := PaymentEventResponse{}
	this.EventId = eventId
	this.EventDateTime = eventDateTime
	this.EventType = eventType
	return &this
}

// NewPaymentEventResponseWithDefaults instantiates a new PaymentEventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentEventResponseWithDefaults() *PaymentEventResponse {
	this := PaymentEventResponse{}
	return &this
}

// GetEventId returns the EventId field value
func (o *PaymentEventResponse) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetEventIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *PaymentEventResponse) SetEventId(v string) {
	o.EventId = v
}

// GetEventDateTime returns the EventDateTime field value
func (o *PaymentEventResponse) GetEventDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventDateTime
}

// GetEventDateTimeOk returns a tuple with the EventDateTime field value
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetEventDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventDateTime, true
}

// SetEventDateTime sets field value
func (o *PaymentEventResponse) SetEventDateTime(v time.Time) {
	o.EventDateTime = v
}

// GetEventType returns the EventType field value
func (o *PaymentEventResponse) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetEventTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *PaymentEventResponse) SetEventType(v string) {
	o.EventType = v
}

// GetSourceCurrency returns the SourceCurrency field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetSourceCurrency() PaymentAuditCurrency {
	if o == nil || o.SourceCurrency == nil {
		var ret PaymentAuditCurrency
		return ret
	}
	return *o.SourceCurrency
}

// GetSourceCurrencyOk returns a tuple with the SourceCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetSourceCurrencyOk() (*PaymentAuditCurrency, bool) {
	if o == nil || o.SourceCurrency == nil {
		return nil, false
	}
	return o.SourceCurrency, true
}

// HasSourceCurrency returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasSourceCurrency() bool {
	if o != nil && o.SourceCurrency != nil {
		return true
	}

	return false
}

// SetSourceCurrency gets a reference to the given PaymentAuditCurrency and assigns it to the SourceCurrency field.
func (o *PaymentEventResponse) SetSourceCurrency(v PaymentAuditCurrency) {
	o.SourceCurrency = &v
}

// GetSourceAmount returns the SourceAmount field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetSourceAmount() int64 {
	if o == nil || o.SourceAmount == nil {
		var ret int64
		return ret
	}
	return *o.SourceAmount
}

// GetSourceAmountOk returns a tuple with the SourceAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetSourceAmountOk() (*int64, bool) {
	if o == nil || o.SourceAmount == nil {
		return nil, false
	}
	return o.SourceAmount, true
}

// HasSourceAmount returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasSourceAmount() bool {
	if o != nil && o.SourceAmount != nil {
		return true
	}

	return false
}

// SetSourceAmount gets a reference to the given int64 and assigns it to the SourceAmount field.
func (o *PaymentEventResponse) SetSourceAmount(v int64) {
	o.SourceAmount = &v
}

// GetPaymentCurrency returns the PaymentCurrency field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetPaymentCurrency() PaymentAuditCurrency {
	if o == nil || o.PaymentCurrency == nil {
		var ret PaymentAuditCurrency
		return ret
	}
	return *o.PaymentCurrency
}

// GetPaymentCurrencyOk returns a tuple with the PaymentCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetPaymentCurrencyOk() (*PaymentAuditCurrency, bool) {
	if o == nil || o.PaymentCurrency == nil {
		return nil, false
	}
	return o.PaymentCurrency, true
}

// HasPaymentCurrency returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasPaymentCurrency() bool {
	if o != nil && o.PaymentCurrency != nil {
		return true
	}

	return false
}

// SetPaymentCurrency gets a reference to the given PaymentAuditCurrency and assigns it to the PaymentCurrency field.
func (o *PaymentEventResponse) SetPaymentCurrency(v PaymentAuditCurrency) {
	o.PaymentCurrency = &v
}

// GetPaymentAmount returns the PaymentAmount field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetPaymentAmount() int64 {
	if o == nil || o.PaymentAmount == nil {
		var ret int64
		return ret
	}
	return *o.PaymentAmount
}

// GetPaymentAmountOk returns a tuple with the PaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetPaymentAmountOk() (*int64, bool) {
	if o == nil || o.PaymentAmount == nil {
		return nil, false
	}
	return o.PaymentAmount, true
}

// HasPaymentAmount returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasPaymentAmount() bool {
	if o != nil && o.PaymentAmount != nil {
		return true
	}

	return false
}

// SetPaymentAmount gets a reference to the given int64 and assigns it to the PaymentAmount field.
func (o *PaymentEventResponse) SetPaymentAmount(v int64) {
	o.PaymentAmount = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetAccountNumber() string {
	if o == nil || o.AccountNumber == nil {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetAccountNumberOk() (*string, bool) {
	if o == nil || o.AccountNumber == nil {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasAccountNumber() bool {
	if o != nil && o.AccountNumber != nil {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *PaymentEventResponse) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetRoutingNumber returns the RoutingNumber field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetRoutingNumber() string {
	if o == nil || o.RoutingNumber == nil {
		var ret string
		return ret
	}
	return *o.RoutingNumber
}

// GetRoutingNumberOk returns a tuple with the RoutingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetRoutingNumberOk() (*string, bool) {
	if o == nil || o.RoutingNumber == nil {
		return nil, false
	}
	return o.RoutingNumber, true
}

// HasRoutingNumber returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasRoutingNumber() bool {
	if o != nil && o.RoutingNumber != nil {
		return true
	}

	return false
}

// SetRoutingNumber gets a reference to the given string and assigns it to the RoutingNumber field.
func (o *PaymentEventResponse) SetRoutingNumber(v string) {
	o.RoutingNumber = &v
}

// GetIban returns the Iban field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetIban() string {
	if o == nil || o.Iban == nil {
		var ret string
		return ret
	}
	return *o.Iban
}

// GetIbanOk returns a tuple with the Iban field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetIbanOk() (*string, bool) {
	if o == nil || o.Iban == nil {
		return nil, false
	}
	return o.Iban, true
}

// HasIban returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasIban() bool {
	if o != nil && o.Iban != nil {
		return true
	}

	return false
}

// SetIban gets a reference to the given string and assigns it to the Iban field.
func (o *PaymentEventResponse) SetIban(v string) {
	o.Iban = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetAccountName() string {
	if o == nil || o.AccountName == nil {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetAccountNameOk() (*string, bool) {
	if o == nil || o.AccountName == nil {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasAccountName() bool {
	if o != nil && o.AccountName != nil {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *PaymentEventResponse) SetAccountName(v string) {
	o.AccountName = &v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *PaymentEventResponse) GetPrincipal() string {
	if o == nil || o.Principal == nil {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEventResponse) GetPrincipalOk() (*string, bool) {
	if o == nil || o.Principal == nil {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *PaymentEventResponse) HasPrincipal() bool {
	if o != nil && o.Principal != nil {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *PaymentEventResponse) SetPrincipal(v string) {
	o.Principal = &v
}

func (o PaymentEventResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventId"] = o.EventId
	}
	if true {
		toSerialize["eventDateTime"] = o.EventDateTime
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if o.SourceCurrency != nil {
		toSerialize["sourceCurrency"] = o.SourceCurrency
	}
	if o.SourceAmount != nil {
		toSerialize["sourceAmount"] = o.SourceAmount
	}
	if o.PaymentCurrency != nil {
		toSerialize["paymentCurrency"] = o.PaymentCurrency
	}
	if o.PaymentAmount != nil {
		toSerialize["paymentAmount"] = o.PaymentAmount
	}
	if o.AccountNumber != nil {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if o.RoutingNumber != nil {
		toSerialize["routingNumber"] = o.RoutingNumber
	}
	if o.Iban != nil {
		toSerialize["iban"] = o.Iban
	}
	if o.AccountName != nil {
		toSerialize["accountName"] = o.AccountName
	}
	if o.Principal != nil {
		toSerialize["principal"] = o.Principal
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentEventResponse struct {
	value *PaymentEventResponse
	isSet bool
}

func (v NullablePaymentEventResponse) Get() *PaymentEventResponse {
	return v.value
}

func (v *NullablePaymentEventResponse) Set(val *PaymentEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentEventResponse(val *PaymentEventResponse) *NullablePaymentEventResponse {
	return &NullablePaymentEventResponse{value: val, isSet: true}
}

func (v NullablePaymentEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


