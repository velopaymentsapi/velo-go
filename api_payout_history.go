/*
 * Velo Payments APIs
 *
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * API version: 2.16.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package velopayments

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"fmt"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// PayoutHistoryApiService PayoutHistoryApi service
type PayoutHistoryApiService service

// GetPaymentsForPayoutOpts Optional parameters for the method 'GetPaymentsForPayout'
type GetPaymentsForPayoutOpts struct {
    RemoteId optional.String
    Status optional.String
    SourceAmountFrom optional.Int32
    SourceAmountTo optional.Int32
    PaymentAmountFrom optional.Int32
    PaymentAmountTo optional.Int32
    SubmittedDateFrom optional.String
    SubmittedDateTo optional.String
    Page optional.Int32
    PageSize optional.Int32
    Sort optional.String
    Sensitive optional.Bool
}

/*
GetPaymentsForPayout Get Payments for Payout
Get List of payments for Payout 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payoutId The id (UUID) of the payout.
 * @param optional nil or *GetPaymentsForPayoutOpts - Optional Parameters:
 * @param "RemoteId" (optional.String) -  The remote id of the payees.
 * @param "Status" (optional.String) -  Payment Status
 * @param "SourceAmountFrom" (optional.Int32) -  The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
 * @param "SourceAmountTo" (optional.Int32) -  The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
 * @param "PaymentAmountFrom" (optional.Int32) -  The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
 * @param "PaymentAmountTo" (optional.Int32) -  The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
 * @param "SubmittedDateFrom" (optional.String) -  The submitted date from range filter. Format is yyyy-MM-dd.
 * @param "SubmittedDateTo" (optional.String) -  The submitted date to range filter. Format is yyyy-MM-dd.
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status 
 * @param "Sensitive" (optional.Bool) -  Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
@return GetPaymentsForPayoutResponseV3
*/
func (a *PayoutHistoryApiService) GetPaymentsForPayout(ctx _context.Context, payoutId string, localVarOptionals *GetPaymentsForPayoutOpts) (GetPaymentsForPayoutResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPaymentsForPayoutResponseV3
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v3/paymentaudit/payouts/{payoutId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payoutId"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", payoutId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.RemoteId.IsSet() {
		localVarQueryParams.Add("remoteId", parameterToString(localVarOptionals.RemoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountFrom.IsSet() {
		localVarQueryParams.Add("sourceAmountFrom", parameterToString(localVarOptionals.SourceAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountTo.IsSet() {
		localVarQueryParams.Add("sourceAmountTo", parameterToString(localVarOptionals.SourceAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountFrom.IsSet() {
		localVarQueryParams.Add("paymentAmountFrom", parameterToString(localVarOptionals.PaymentAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountTo.IsSet() {
		localVarQueryParams.Add("paymentAmountTo", parameterToString(localVarOptionals.PaymentAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateTo.IsSet() {
		localVarQueryParams.Add("submittedDateTo", parameterToString(localVarOptionals.SubmittedDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sensitive.IsSet() {
		localVarQueryParams.Add("sensitive", parameterToString(localVarOptionals.Sensitive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetPaymentsForPayoutResponseV3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetPaymentsForPayoutV4Opts Optional parameters for the method 'GetPaymentsForPayoutV4'
type GetPaymentsForPayoutV4Opts struct {
    RemoteId optional.String
    Status optional.String
    SourceAmountFrom optional.Int32
    SourceAmountTo optional.Int32
    PaymentAmountFrom optional.Int32
    PaymentAmountTo optional.Int32
    SubmittedDateFrom optional.String
    SubmittedDateTo optional.String
    Page optional.Int32
    PageSize optional.Int32
    Sort optional.String
    Sensitive optional.Bool
}

/*
GetPaymentsForPayoutV4 Get Payments for Payout
Get List of payments for Payout, allowing for RETURNED status 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param payoutId The id (UUID) of the payout.
 * @param optional nil or *GetPaymentsForPayoutV4Opts - Optional Parameters:
 * @param "RemoteId" (optional.String) -  The remote id of the payees.
 * @param "Status" (optional.String) -  Payment Status
 * @param "SourceAmountFrom" (optional.Int32) -  The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
 * @param "SourceAmountTo" (optional.Int32) -  The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
 * @param "PaymentAmountFrom" (optional.Int32) -  The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
 * @param "PaymentAmountTo" (optional.Int32) -  The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
 * @param "SubmittedDateFrom" (optional.String) -  The submitted date from range filter. Format is yyyy-MM-dd.
 * @param "SubmittedDateTo" (optional.String) -  The submitted date to range filter. Format is yyyy-MM-dd.
 * @param "Page" (optional.Int32) -  Page number. Default is 1.
 * @param "PageSize" (optional.Int32) -  Page size. Default is 25. Max allowable is 100.
 * @param "Sort" (optional.String) -  List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status 
 * @param "Sensitive" (optional.Bool) -  Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
@return GetPaymentsForPayoutResponseV4
*/
func (a *PayoutHistoryApiService) GetPaymentsForPayoutV4(ctx _context.Context, payoutId string, localVarOptionals *GetPaymentsForPayoutV4Opts) (GetPaymentsForPayoutResponseV4, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPaymentsForPayoutResponseV4
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v4/paymentaudit/payouts/{payoutId}"
	localVarPath = strings.Replace(localVarPath, "{"+"payoutId"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", payoutId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.RemoteId.IsSet() {
		localVarQueryParams.Add("remoteId", parameterToString(localVarOptionals.RemoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountFrom.IsSet() {
		localVarQueryParams.Add("sourceAmountFrom", parameterToString(localVarOptionals.SourceAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceAmountTo.IsSet() {
		localVarQueryParams.Add("sourceAmountTo", parameterToString(localVarOptionals.SourceAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountFrom.IsSet() {
		localVarQueryParams.Add("paymentAmountFrom", parameterToString(localVarOptionals.PaymentAmountFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentAmountTo.IsSet() {
		localVarQueryParams.Add("paymentAmountTo", parameterToString(localVarOptionals.PaymentAmountTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateFrom.IsSet() {
		localVarQueryParams.Add("submittedDateFrom", parameterToString(localVarOptionals.SubmittedDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubmittedDateTo.IsSet() {
		localVarQueryParams.Add("submittedDateTo", parameterToString(localVarOptionals.SubmittedDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sensitive.IsSet() {
		localVarQueryParams.Add("sensitive", parameterToString(localVarOptionals.Sensitive.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetPaymentsForPayoutResponseV4
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetPayoutStatsOpts Optional parameters for the method 'GetPayoutStats'
type GetPayoutStatsOpts struct {
    PayorId optional.Interface
}

/*
GetPayoutStats Get Payout Statistics
Get payout statistics for a payor.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetPayoutStatsOpts - Optional Parameters:
 * @param "PayorId" (optional.Interface of string) -  The account owner Payor ID. Required for external users.
@return GetPayoutStatistics
*/
func (a *PayoutHistoryApiService) GetPayoutStats(ctx _context.Context, localVarOptionals *GetPayoutStatsOpts) (GetPayoutStatistics, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPayoutStatistics
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/paymentaudit/payoutStatistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.PayorId.IsSet() {
		localVarQueryParams.Add("payorId", parameterToString(localVarOptionals.PayorId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetPayoutStatistics
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
