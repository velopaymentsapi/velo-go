/*
Velo Payments APIs

## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 

API version: 2.29.128
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package velopayments

import (
	"encoding/json"
	"time"
)

// FundingAudit struct for FundingAudit
type FundingAudit struct {
	// The amount funded
	Amount *float64 `json:"amount,omitempty"`
	// The currency of the funding
	Currency *string `json:"currency,omitempty"`
	DateTime *time.Time `json:"dateTime,omitempty"`
	Status *string `json:"status,omitempty"`
	SourceAccountName *string `json:"sourceAccountName,omitempty"`
	FundingAccountName *string `json:"fundingAccountName,omitempty"`
	FundingType *string `json:"fundingType,omitempty"`
	Events []FundingEvent `json:"events,omitempty"`
	TopupType *string `json:"topupType,omitempty"`
}

// NewFundingAudit instantiates a new FundingAudit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundingAudit() *FundingAudit {
	this := FundingAudit{}
	return &this
}

// NewFundingAuditWithDefaults instantiates a new FundingAudit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundingAuditWithDefaults() *FundingAudit {
	this := FundingAudit{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *FundingAudit) GetAmount() float64 {
	if o == nil || o.Amount == nil {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetAmountOk() (*float64, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *FundingAudit) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *FundingAudit) SetAmount(v float64) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *FundingAudit) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *FundingAudit) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *FundingAudit) SetCurrency(v string) {
	o.Currency = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *FundingAudit) GetDateTime() time.Time {
	if o == nil || o.DateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetDateTimeOk() (*time.Time, bool) {
	if o == nil || o.DateTime == nil {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *FundingAudit) HasDateTime() bool {
	if o != nil && o.DateTime != nil {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given time.Time and assigns it to the DateTime field.
func (o *FundingAudit) SetDateTime(v time.Time) {
	o.DateTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FundingAudit) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FundingAudit) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FundingAudit) SetStatus(v string) {
	o.Status = &v
}

// GetSourceAccountName returns the SourceAccountName field value if set, zero value otherwise.
func (o *FundingAudit) GetSourceAccountName() string {
	if o == nil || o.SourceAccountName == nil {
		var ret string
		return ret
	}
	return *o.SourceAccountName
}

// GetSourceAccountNameOk returns a tuple with the SourceAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetSourceAccountNameOk() (*string, bool) {
	if o == nil || o.SourceAccountName == nil {
		return nil, false
	}
	return o.SourceAccountName, true
}

// HasSourceAccountName returns a boolean if a field has been set.
func (o *FundingAudit) HasSourceAccountName() bool {
	if o != nil && o.SourceAccountName != nil {
		return true
	}

	return false
}

// SetSourceAccountName gets a reference to the given string and assigns it to the SourceAccountName field.
func (o *FundingAudit) SetSourceAccountName(v string) {
	o.SourceAccountName = &v
}

// GetFundingAccountName returns the FundingAccountName field value if set, zero value otherwise.
func (o *FundingAudit) GetFundingAccountName() string {
	if o == nil || o.FundingAccountName == nil {
		var ret string
		return ret
	}
	return *o.FundingAccountName
}

// GetFundingAccountNameOk returns a tuple with the FundingAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetFundingAccountNameOk() (*string, bool) {
	if o == nil || o.FundingAccountName == nil {
		return nil, false
	}
	return o.FundingAccountName, true
}

// HasFundingAccountName returns a boolean if a field has been set.
func (o *FundingAudit) HasFundingAccountName() bool {
	if o != nil && o.FundingAccountName != nil {
		return true
	}

	return false
}

// SetFundingAccountName gets a reference to the given string and assigns it to the FundingAccountName field.
func (o *FundingAudit) SetFundingAccountName(v string) {
	o.FundingAccountName = &v
}

// GetFundingType returns the FundingType field value if set, zero value otherwise.
func (o *FundingAudit) GetFundingType() string {
	if o == nil || o.FundingType == nil {
		var ret string
		return ret
	}
	return *o.FundingType
}

// GetFundingTypeOk returns a tuple with the FundingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetFundingTypeOk() (*string, bool) {
	if o == nil || o.FundingType == nil {
		return nil, false
	}
	return o.FundingType, true
}

// HasFundingType returns a boolean if a field has been set.
func (o *FundingAudit) HasFundingType() bool {
	if o != nil && o.FundingType != nil {
		return true
	}

	return false
}

// SetFundingType gets a reference to the given string and assigns it to the FundingType field.
func (o *FundingAudit) SetFundingType(v string) {
	o.FundingType = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *FundingAudit) GetEvents() []FundingEvent {
	if o == nil || o.Events == nil {
		var ret []FundingEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetEventsOk() ([]FundingEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *FundingAudit) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []FundingEvent and assigns it to the Events field.
func (o *FundingAudit) SetEvents(v []FundingEvent) {
	o.Events = v
}

// GetTopupType returns the TopupType field value if set, zero value otherwise.
func (o *FundingAudit) GetTopupType() string {
	if o == nil || o.TopupType == nil {
		var ret string
		return ret
	}
	return *o.TopupType
}

// GetTopupTypeOk returns a tuple with the TopupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundingAudit) GetTopupTypeOk() (*string, bool) {
	if o == nil || o.TopupType == nil {
		return nil, false
	}
	return o.TopupType, true
}

// HasTopupType returns a boolean if a field has been set.
func (o *FundingAudit) HasTopupType() bool {
	if o != nil && o.TopupType != nil {
		return true
	}

	return false
}

// SetTopupType gets a reference to the given string and assigns it to the TopupType field.
func (o *FundingAudit) SetTopupType(v string) {
	o.TopupType = &v
}

func (o FundingAudit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.DateTime != nil {
		toSerialize["dateTime"] = o.DateTime
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.SourceAccountName != nil {
		toSerialize["sourceAccountName"] = o.SourceAccountName
	}
	if o.FundingAccountName != nil {
		toSerialize["fundingAccountName"] = o.FundingAccountName
	}
	if o.FundingType != nil {
		toSerialize["fundingType"] = o.FundingType
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.TopupType != nil {
		toSerialize["topupType"] = o.TopupType
	}
	return json.Marshal(toSerialize)
}

type NullableFundingAudit struct {
	value *FundingAudit
	isSet bool
}

func (v NullableFundingAudit) Get() *FundingAudit {
	return v.value
}

func (v *NullableFundingAudit) Set(val *FundingAudit) {
	v.value = val
	v.isSet = true
}

func (v NullableFundingAudit) IsSet() bool {
	return v.isSet
}

func (v *NullableFundingAudit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundingAudit(val *FundingAudit) *NullableFundingAudit {
	return &NullableFundingAudit{value: val, isSet: true}
}

func (v NullableFundingAudit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundingAudit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


