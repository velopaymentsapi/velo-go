/*
Velo Payments APIs

Testing FundingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package velopayments

import (
	"context"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func Test_velopayments_FundingAPIService(t *testing.T) {

	payorID := os.Getenv("PAYOR")

	configuration := NewConfiguration()
	configuration.Servers = ServerConfigurations{
		{
			URL:         os.Getenv("APIURL"),
			Description: "Velo Payments for testing",
		},
	}
	apiClient := NewAPIClient(configuration)

	otoken, err := authWithVelo()
	if err != nil {
		t.Errorf("oauth token not generated")
	}
	token, err := tokenToOAuth2(otoken)
	if err != nil {
		t.Errorf("oauth2 token not generated")
	}

	t.Run("Test FundingAPIService CreateFundingRequestV2", func(t *testing.T) {

		t.Skip("skip test")

	})

	t.Run("Test FundingAPIService CreateFundingRequestV3", func(t *testing.T) {

		t.Skip("skip test")

	})

	t.Run("Test FundingAPIService GetFundingAccountV2", func(t *testing.T) {

		t.Skip("skip test")

	})

	t.Run("Test FundingAPIService GetFundingAccountsV2", func(t *testing.T) {
		cases := map[string]struct{ ExpectedStatus int }{
			"valid": {200},
		}

		for k, tc := range cases {
			auth := context.WithValue(context.TODO(), ContextOAuth2, token)
			_, h, err := apiClient.FundingAPI.GetFundingAccountsV2(auth).PayorId(payorID).Execute()
			if err != nil {
				t.Errorf("TEST %s FAILED with error", k)
			}

			assert.Equal(t, tc.ExpectedStatus, h.StatusCode, "GetFundingAccountsV2: %s - returned 200", k)
		}

	})

	t.Run("Test FundingAPIService GetFundingByIdV1", func(t *testing.T) {

		t.Skip("skip test")

	})

	t.Run("Test FundingAPIService ListFundingAuditDeltas", func(t *testing.T) {
		cases := map[string]struct{ ExpectedStatus int }{
			"valid": {200},
		}

		now := time.Now()

		for k, tc := range cases {
			auth := context.WithValue(context.TODO(), ContextOAuth2, token)
			_, h, err := apiClient.FundingAPI.ListFundingAuditDeltas(auth).PayorId(payorID).UpdatedSince(now).Execute()
			if err != nil {
				t.Errorf("TEST %s FAILED with error", k)
			}

			assert.Equal(t, tc.ExpectedStatus, h.StatusCode, "ListFundingAuditDeltas: %s - returned 200", k)
		}

	})

}
